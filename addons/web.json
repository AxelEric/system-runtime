{
    "name": "web",
    "version": "0.1.0",
    "description": "Add behaviors for web",
    "_id": "133421d0c313d2d",
    "schemas": {
        "MonocoSchema": {
            "load": "method",
            "ready": "event"
        },
        "Monoco": {
            "load": {
                "params": [
                    {
                        "name": "url",
                        "type": "string"
                    },
                    {
                        "name": "async",
                        "type": "boolean",
                        "mandatory": false,
                        "default": true
                    }
                ]
            },
            "ready": {}
        }
    },
    "types": {},
    "behaviors": {
        "1aaee1e6311ff39": {
            "_id": "1aaee1e6311ff39",
            "component": "monoco",
            "state": "load",
            "action": "function load(url, async) {    var xhr = null,        callbackLoad = null;    xhr = new XMLHttpRequest();    callbackLoad = function callbackLoad(system) {        var sysId = $db.system(system),            sys = $component.get(sysId),            systems = document.querySelectorAll('link[rel=system]'),            nbSubsystem = $db.MonocoSystem.find({                'subsystem': true            });        if (sys) {            sys.main();        }        if (systems.length + 1 + nbSubsystem.length === $db.MonocoSystem.count()) {            $component.get('monoco').ready();        }    };    if (async) {        xhr.open('GET', url, true);        xhr.onreadystatechange = function () {            if (xhr.readyState === 4) {                if (xhr.status === 200) {                    callbackLoad(JSON.parse(xhr.response));                }            }        };        xhr.send(null);    } else {        xhr.open('GET', url, false);        xhr.send(null);        if (xhr.status === 200) {            callbackLoad(JSON.parse(xhr.response));        }    }}",
            "core": true,
            "useCoreAPI": true
        },
        "1f6001773a18791": {
            "_id": "1f6001773a18791",
            "component": "e89c617b6b15d24",
            "state": "main",
            "action": "function main() {    var subsystems = [],        systems = [],        system = null, i = 0,        length = 0;    subsystems = $db.MonocoSystem.find({        'subsystem': true    });    subsystems.forEach(function (subsystem) {        var subsystemId = subsystem._id;        this.require(subsystemId).main();    }, this);    if (typeof document !== 'undefined') {        systems = document.querySelectorAll('link[rel=system]');        length = systems.length;        for (i = 0; i < length; i++) {            system = systems[i];            if (system.getAttribute('async') === 'false') {                this.require('monoco').load(system.href, false);            } else {                this.require('monoco').load(system.href, true);            }        }        if (length === 0) {            this.require('monoco').ready();        }    }}",
            "core": true
        }
    },
    "components": {}
}