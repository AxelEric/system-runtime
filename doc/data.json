{
    "project": {
        "name": "monoco",
        "description": "Design.Create.Compose",
        "version": "0.8.0",
        "url": "http://monoco.io"
    },
    "files": {
        "src/behavior.js": {
            "name": "src/behavior.js",
            "modules": {
                "monoco-behavior": 1
            },
            "classes": {
                "monoco-behavior": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/component.js": {
            "name": "src/component.js",
            "modules": {
                "monoco-component": 1
            },
            "classes": {
                "monoco-component": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/db.js": {
            "name": "src/db.js",
            "modules": {
                "monoco-db": 1
            },
            "classes": {
                "monoco-db": 1,
                "MonocoDatabaseCollection": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/helper.js": {
            "name": "src/helper.js",
            "modules": {
                "monoco-helper": 1
            },
            "classes": {
                "monoco-helper": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/log.js": {
            "name": "src/log.js",
            "modules": {
                "monoco-log": 1
            },
            "classes": {
                "monoco-log": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/metamodel.js": {
            "name": "src/metamodel.js",
            "modules": {
                "monoco-metamodel": 1
            },
            "classes": {
                "monoco-metamodel": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/monoco.js": {
            "name": "src/monoco.js",
            "modules": {
                "monoco": 1
            },
            "classes": {
                "monoco": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/state.js": {
            "name": "src/state.js",
            "modules": {
                "monoco-state": 1
            },
            "classes": {
                "monoco-state": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/workflow.js": {
            "name": "src/workflow.js",
            "modules": {
                "monoco-workflow": 1
            },
            "classes": {
                "monoco-workflow": 1,
                "MonocoError": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "build/system/system.js": {
            "name": "build/system/system.js",
            "modules": {
                "monoco-system": 1
            },
            "classes": {
                "monoco-system": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "monoco": {
            "name": "monoco",
            "submodules": {
                "monoco-behavior": 1,
                "monoco-component": 1,
                "monoco-db": 1,
                "monoco-helper": 1,
                "monoco-log": 1,
                "monoco-metamodel": 1,
                "monoco-state": 1,
                "monoco-workflow": 1,
                "monoco-system": 1
            },
            "classes": {
                "monoco-behavior": 1,
                "monoco-component": 1,
                "monoco-db": 1,
                "MonocoDatabaseCollection": 1,
                "monoco-helper": 1,
                "monoco-log": 1,
                "monoco-metamodel": 1,
                "monoco": 1,
                "monoco-state": 1,
                "monoco-workflow": 1,
                "MonocoError": 1,
                "monoco-system": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "build/system/system.js",
            "line": 959,
            "description": "This module is the main module of monoco. <br>\nIt inits monoco metamodel and loads monoco core system.",
            "requires": [
                "monoco-component",
                "monoco-metamodel",
                "monoco-system"
            ],
            "itemtype": "main",
            "static": 1
        },
        "monoco-behavior": {
            "name": "monoco-behavior",
            "submodules": {},
            "classes": {
                "monoco-behavior": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "monoco",
            "namespace": "",
            "file": "src/behavior.js",
            "line": 264,
            "description": "This module manages the behaviors of all components. \nA behavior is a mecanism that allow users to add actions that will be executed \nwhen a specific state of a component will change.",
            "requires": [
                "monoco-db",
                "monoco-helper",
                "monoco-channel"
            ],
            "static": 1
        },
        "monoco-component": {
            "name": "monoco-component",
            "submodules": {},
            "classes": {
                "monoco-component": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "monoco",
            "namespace": "",
            "file": "src/component.js",
            "line": 941,
            "description": "This module manages the components. \nIt is the factory of all the components that are created by monoco.",
            "requires": [
                "monoco-workflow",
                "monoco-db",
                "monoco-metamodel",
                "monoco-behavior",
                "monoco-helper",
                "monoco-log"
            ],
            "static": 1
        },
        "monoco-db": {
            "name": "monoco-db",
            "submodules": {},
            "classes": {
                "monoco-db": 1,
                "MonocoDatabaseCollection": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "monoco",
            "namespace": "",
            "file": "src/db.js",
            "line": 174,
            "description": "This module manages monoco database. <br>\nmonoco database is a micro NoSQL Database that contains: <br>\n- collections to store documents (schemas, types, components, ...) and <br>\n- APIs to import or export documents. <br>\n\nmonoco Database is closely linked to monoco metamodel and monoco components because: <br>\n- all operations done by monoco database must be compliant with the model before being finished, <br>\n- insert operation automatically creates a component and <br>\n- remove operation automatically destroy a component.",
            "requires": [
                "monoco-component",
                "monoco-helper",
                "monoco-log"
            ],
            "static": 1
        },
        "monoco-helper": {
            "name": "monoco-helper",
            "submodules": {},
            "classes": {
                "monoco-helper": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "monoco",
            "namespace": "",
            "file": "src/helper.js",
            "line": 110,
            "description": "This module contains all the functions used by all the modules.",
            "requires": [
                "monoco-db",
                "monoco-component"
            ],
            "static": 1
        },
        "monoco-log": {
            "name": "monoco-log",
            "submodules": {},
            "classes": {
                "monoco-log": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "monoco",
            "namespace": "",
            "file": "src/log.js",
            "line": 446,
            "description": "This module contains all the functions that write a log.",
            "requires": [
                "monoco-helper"
            ],
            "static": 1
        },
        "monoco-metamodel": {
            "name": "monoco-metamodel",
            "submodules": {},
            "classes": {
                "monoco-metamodel": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "monoco",
            "namespace": "",
            "file": "src/metamodel.js",
            "line": 1392,
            "description": "This module manages monoco metamodel. <br>\nmonoco metamodel loads schemas and types, analyzes them and creates the component classes and related MonocoDatabaseCollections.",
            "requires": [
                "monoco-db",
                "monoco-log",
                "monoco-component",
                "monoco-workflow"
            ],
            "static": 1
        },
        "monoco-state": {
            "name": "monoco-state",
            "submodules": {},
            "classes": {
                "monoco-state": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "monoco",
            "namespace": "",
            "file": "src/state.js",
            "line": 94,
            "description": "This module manages the states of all thecomponents.",
            "requires": [
                "monoco-db"
            ],
            "static": 1
        },
        "monoco-workflow": {
            "name": "monoco-workflow",
            "submodules": {},
            "classes": {
                "monoco-workflow": 1,
                "MonocoError": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "monoco",
            "namespace": "",
            "file": "src/workflow.js",
            "line": 61,
            "description": "This module manages the workflow of monoco. It behaves like a workflow engine. <br>\nIt checks if the change of status of a component is valid to be executed. By valid, it means that:<br>\n- the state is valid for the component, <br>\n- the input (i.e. parameters) of all actions for the state are compliants with the model and <br>\n- the output of all actions are compliants with the model. <br>\n\nIf an error occurs, the workflow will call the error state of the component and monoco. <br>\nIf the error can break the consistency of the current system, the worklow will stop.",
            "requires": [
                "monoco-metamodel",
                "monoco-component",
                "monoco-behavior",
                "monoco-channel",
                "monoco-state",
                "monoco-helper",
                "monoco-log",
                "monoco-db"
            ],
            "static": 1
        },
        "monoco-system": {
            "name": "monoco-system",
            "submodules": {},
            "classes": {
                "monoco-system": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "monoco",
            "namespace": "",
            "file": "build/system/system.js",
            "line": 959,
            "description": "This module contains monoco core system.",
            "static": 1
        }
    },
    "classes": {
        "monoco-behavior": {
            "name": "monoco-behavior",
            "shortname": "monoco-behavior",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "monoco",
            "submodule": "monoco-behavior",
            "namespace": "",
            "file": "src/behavior.js",
            "line": 264,
            "description": "This module manages the behaviors of all components. A behavior is a mecanism that allow users to add action that will be executed \nwhen a specific state of a component will change.",
            "requires": [
                "monoco-db",
                "monoco-helper",
                "monoco-channel"
            ]
        },
        "monoco-component": {
            "name": "monoco-component",
            "shortname": "monoco-component",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "monoco",
            "submodule": "monoco-component",
            "namespace": "",
            "file": "src/component.js",
            "line": 941,
            "description": "This module manages the components. \nIt is the factory of all the components that are created by monoco.",
            "requires": [
                "monoco-workflow",
                "monoco-db",
                "monoco-metamodel",
                "monoco-behavior",
                "monoco-helper",
                "monoco-log"
            ]
        },
        "monoco-db": {
            "name": "monoco-db",
            "shortname": "monoco-db",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "monoco",
            "submodule": "monoco-db",
            "namespace": "",
            "file": "src/db.js",
            "line": 762,
            "description": "This module manages monoco database. <br>\nmonoco database is a micro NoSQL Database that contains: <br>\n- collections to store documents (schemas, types, components, ...) and <br>\n- APIs to import or export documents. <br>\n\nmonoco database is closely linked to monoco metamodel because: <br>\n- all operations done by monoco database must be compliant with the model before being finished, <br>\n- insert operation automatically creates a component and <br>\n- remove operation automatically destroy a component.",
            "requires": [
                "monoco-component",
                "monoco-helper",
                "monoco-log"
            ]
        },
        "MonocoDatabaseCollection": {
            "name": "MonocoDatabaseCollection",
            "shortname": "MonocoDatabaseCollection",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "monoco",
            "submodule": "monoco-db",
            "namespace": "",
            "file": "src/db.js",
            "line": 174,
            "description": "A collection of documents managed by monoco. <br>\nInternal collections manage core objects of monoco (schema, type, ...). <br>\nPublic collections manage components of the same class. <br>",
            "is_constructor": 1,
            "params": [
                {
                    "name": "name",
                    "description": "name of the new collection",
                    "type": "String"
                }
            ]
        },
        "monoco-helper": {
            "name": "monoco-helper",
            "shortname": "monoco-helper",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "monoco",
            "submodule": "monoco-helper",
            "namespace": "",
            "file": "src/helper.js",
            "line": 110,
            "description": "This module contains all the functions used by all the modules.",
            "requires": [
                "monoco-db",
                "monoco-component"
            ]
        },
        "monoco-log": {
            "name": "monoco-log",
            "shortname": "monoco-log",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "monoco",
            "submodule": "monoco-log",
            "namespace": "",
            "file": "src/log.js",
            "line": 446,
            "description": "This module contains all the functions that write a log.",
            "requires": [
                "monoco-helper"
            ]
        },
        "monoco-metamodel": {
            "name": "monoco-metamodel",
            "shortname": "monoco-metamodel",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "monoco",
            "submodule": "monoco-metamodel",
            "namespace": "",
            "file": "src/metamodel.js",
            "line": 1392,
            "description": "This module manages monoco metamodel. <br>\nmonoco metamodel loads schemas and types, analyzes them and creates the component classes and related MonocoDatabaseCollections.",
            "requires": [
                "monoco-db",
                "monoco-log",
                "monoco-component",
                "monoco-workflow"
            ]
        },
        "monoco": {
            "name": "monoco",
            "shortname": "monoco",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "monoco",
            "namespace": "",
            "file": "src/monoco.js",
            "line": 67,
            "description": "This module is the main module of monoco. <br>\nIt inits monoco metamodel and loads monoco core system.",
            "requires": [
                "monoco-component",
                "monoco-metamodel",
                "monoco-system"
            ],
            "mainName": "monoco",
            "tag": "main",
            "itemtype": "main",
            "_main": true
        },
        "monoco-state": {
            "name": "monoco-state",
            "shortname": "monoco-state",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "monoco",
            "submodule": "monoco-state",
            "namespace": "",
            "file": "src/state.js",
            "line": 94,
            "description": "This module manages the states of all the components.",
            "requires": [
                "monoco-db"
            ]
        },
        "monoco-workflow": {
            "name": "monoco-workflow",
            "shortname": "monoco-workflow",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "monoco",
            "submodule": "monoco-workflow",
            "namespace": "",
            "file": "src/workflow.js",
            "line": 695,
            "description": "This module manages the workflow of monoco. It behaves like a workflow engine. <br>\nIt checks if the change of status of a component is valid to be executed. By valid, it means that:<br>\n- the state is valid for the component, <br>\n- the input (i.e. parameters) of all actions for the state are compliants with the model and <br>\n- the output of all actions are compliants with the model. <br>\n\nIf an error occurs, the workflow will call the error state of the component and monoco. <br>\nIf the error can break the consistency of the current system, the worklow will stop.",
            "requires": [
                "monoco-metamodel",
                "monoco-component",
                "monoco-behavior",
                "monoco-channel",
                "monoco-state",
                "monoco-helper",
                "monoco-log",
                "monoco-db"
            ]
        },
        "MonocoError": {
            "name": "MonocoError",
            "shortname": "MonocoError",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "monoco",
            "submodule": "monoco-workflow",
            "namespace": "",
            "file": "src/workflow.js",
            "line": 61,
            "description": "The MonocoError class.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "message",
                    "description": "message of the error",
                    "type": "String"
                }
            ]
        },
        "monoco-system": {
            "name": "monoco-system",
            "shortname": "monoco-system",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "monoco",
            "submodule": "monoco-system",
            "namespace": "",
            "file": "build/system/system.js",
            "line": 959,
            "description": "This module contains monoco core system."
        }
    },
    "classitems": [
        {
            "file": "src/behavior.js",
            "line": 278,
            "description": "Add a behavior that will be stored in monoco database.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "id",
                    "description": "id of the component",
                    "type": "String"
                },
                {
                    "name": "state",
                    "description": "the state on which the action will be executed",
                    "type": "Object"
                },
                {
                    "name": "action",
                    "description": "the action to execute when the component will have a specific state",
                    "type": "Object"
                },
                {
                    "name": "useCoreAPI",
                    "description": "if true, monoco core modules will be injected as parameters of the action (default false)",
                    "type": "Boolean"
                },
                {
                    "name": "core",
                    "description": "if true, behavior can not be exported",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "id of the behavior created in monoco database",
                "type": "String"
            },
            "class": "monoco-behavior",
            "module": "monoco",
            "submodule": "monoco-behavior"
        },
        {
            "file": "src/behavior.js",
            "line": 291,
            "description": "Get a behavior by its id.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "id",
                    "description": "id of the behavior",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the behavior",
                "type": "Behavior"
            },
            "class": "monoco-behavior",
            "module": "monoco",
            "submodule": "monoco-behavior"
        },
        {
            "file": "src/behavior.js",
            "line": 300,
            "description": "Remove a behavior with its id or remove all the behaviors for a specific state\nof the component.",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "params",
                    "description": "<br>\n{String} componentId id of the component <br>\n{String} state state of the component <br>\n{String} behaviorId id of the behavior (optional)) <br>",
                    "type": "Object"
                }
            ],
            "class": "monoco-behavior",
            "module": "monoco",
            "submodule": "monoco-behavior"
        },
        {
            "file": "src/behavior.js",
            "line": 312,
            "description": "Get all the actions of a behavior for a component.",
            "itemtype": "method",
            "name": "getActions",
            "params": [
                {
                    "name": "id",
                    "description": "id of the component",
                    "type": "String"
                },
                {
                    "name": "state",
                    "description": "name of the state",
                    "type": "String"
                }
            ],
            "return": {
                "description": "all the actions that have to be executed for a specific component and state",
                "type": "Array"
            },
            "class": "monoco-behavior",
            "module": "monoco",
            "submodule": "monoco-behavior"
        },
        {
            "file": "src/behavior.js",
            "line": 322,
            "description": "Remove all the behaviors stored in memory.",
            "itemtype": "method",
            "name": "clear",
            "class": "monoco-behavior",
            "module": "monoco",
            "submodule": "monoco-behavior"
        },
        {
            "file": "src/behavior.js",
            "line": 329,
            "description": "Remove a behavior with its id from the memory.",
            "itemtype": "method",
            "name": "removeFromMemory",
            "params": [
                {
                    "name": "id",
                    "description": "id of the component",
                    "type": "String"
                }
            ],
            "class": "monoco-behavior",
            "module": "monoco",
            "submodule": "monoco-behavior"
        },
        {
            "file": "src/component.js",
            "line": 958,
            "description": "Create a component from its configuration.",
            "itemtype": "method",
            "name": "create",
            "params": [
                {
                    "name": "config",
                    "description": "<br>\n{String} model model name <br>",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "component",
                "type": "Component"
            },
            "class": "monoco-component",
            "module": "monoco",
            "submodule": "monoco-component"
        },
        {
            "file": "src/component.js",
            "line": 968,
            "description": "Get a component by its id.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "id",
                    "description": "id of the component",
                    "type": "String"
                }
            ],
            "return": {
                "description": "component",
                "type": "Component"
            },
            "class": "monoco-component",
            "module": "monoco",
            "submodule": "monoco-component"
        },
        {
            "file": "src/component.js",
            "line": 977,
            "description": "Remove all the components store in memory.",
            "itemtype": "method",
            "name": "clear",
            "class": "monoco-component",
            "module": "monoco",
            "submodule": "monoco-component"
        },
        {
            "file": "src/component.js",
            "line": 984,
            "description": "Destroy a component from its id.",
            "itemtype": "method",
            "name": "destroy",
            "params": [
                {
                    "name": "id",
                    "description": "id of the component to destroy",
                    "type": "String"
                }
            ],
            "return": {
                "description": "if the component has been destroyed",
                "type": "Boolean"
            },
            "class": "monoco-component",
            "module": "monoco",
            "submodule": "monoco-component"
        },
        {
            "file": "src/db.js",
            "line": 196,
            "description": "Find a document into the collection.",
            "itemtype": "method",
            "name": "find",
            "params": [
                {
                    "name": "query",
                    "description": "",
                    "type": "Object|Array"
                }
            ],
            "return": {
                "description": "Array of documents that map the query",
                "type": "Array"
            },
            "example": [
                " \n$db.Person.find({\"name\": \"laure\"}); <br>\n$db.Person.find({\"name\": \"laure\", \"age\" : 24}); <br>\n$db.Person.find([{\"name\": \"rene\"}, {\"name\": \"robert\"}]);"
            ],
            "class": "MonocoDatabaseCollection",
            "module": "monoco",
            "submodule": "monoco-db"
        },
        {
            "file": "src/db.js",
            "line": 243,
            "description": "Insert an new document into the collection. <br>\nBefore inserting the document, monoco checks that the document is compliant\nwith its class definition. <br> \nThen, after inserting it, we create the component.",
            "itemtype": "method",
            "name": "insert",
            "params": [
                {
                    "name": "document",
                    "description": "a new object to add",
                    "type": "Object|Array"
                }
            ],
            "return": {
                "description": "array of id created",
                "type": "Array"
            },
            "example": [
                " \n$db.Person.insert({<br>\n     \"name\": \"bob\", <br>\n     \"firstName\": \"Saint-Clar\", <br>\n     \"age\": 43 <br>\n}); <br>"
            ],
            "class": "MonocoDatabaseCollection",
            "module": "monoco",
            "submodule": "monoco-db"
        },
        {
            "file": "src/db.js",
            "line": 328,
            "description": "Update documents into a collection.",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "query",
                    "description": "query to find the documents to update",
                    "type": "Object|Array"
                },
                {
                    "name": "update",
                    "description": "update to make",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "\n{Boolean} upsert true if we create a document when no document is found by the query",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Number of documents updated",
                "type": "Number"
            },
            "example": [
                " \n$db.Cars.update({\"code\": \"AZD-71\"}, {\"price\": \"10000$\"}); <br>\n$db.Cars.update([{\"code\": \"AZD-71\"}, {\"code\": \"AZD-65\"}], {\"price\": \"10000$\"}); <br>\n$db.Cars.update({\"code\": \"AZD-71\"}, {\"price\": \"10000$\"}, {\"upsert\": true}); <br>"
            ],
            "class": "MonocoDatabaseCollection",
            "module": "monoco",
            "submodule": "monoco-db"
        },
        {
            "file": "src/db.js",
            "line": 407,
            "description": "Remove a document from the colllection. <br>\nWhen a document is removed, the component is destroyed.",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "query",
                    "description": "query to find the documents to remove",
                    "type": "Object|Array"
                }
            ],
            "return": {
                "description": "list of documents id removed",
                "type": "Array"
            },
            "example": [
                " \n$db.Cars.remove({\"code\": \"AZD-71\"}); <br>\n$db.Cars.remove([{\"code\": \"AZD-71\"}, {\"code\": \"AZD-65\"}]); <br>"
            ],
            "class": "MonocoDatabaseCollection",
            "module": "monoco",
            "submodule": "monoco-db"
        },
        {
            "file": "src/db.js",
            "line": 484,
            "description": "Count the number of documents in the collection.",
            "itemtype": "method",
            "name": "count",
            "return": {
                "description": "number of documents in the collection",
                "type": "Number"
            },
            "class": "MonocoDatabaseCollection",
            "module": "monoco",
            "submodule": "monoco-db"
        },
        {
            "file": "src/db.js",
            "line": 783,
            "description": "Create a new {{#crossLink \"MonocoDatabaseCollection\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "collection",
            "params": [
                {
                    "name": "name",
                    "description": "of the collection",
                    "type": "String"
                }
            ],
            "class": "monoco-db",
            "module": "monoco",
            "submodule": "monoco-db"
        },
        {
            "file": "src/db.js",
            "line": 791,
            "description": "monoco database store that lists all the collections.",
            "itemtype": "property",
            "name": "store",
            "type": "JSON",
            "class": "monoco-db",
            "module": "monoco",
            "submodule": "monoco-db"
        },
        {
            "file": "src/db.js",
            "line": 798,
            "description": "Import/Export a monoco system into/from the database.",
            "itemtype": "method",
            "name": "system",
            "params": [
                {
                    "name": "importedSystem",
                    "description": "a monoco system to import",
                    "type": "JSON"
                }
            ],
            "return": {
                "description": "the id of the imported monoco system or the current monoco system",
                "type": "String"
            },
            "class": "monoco-db",
            "module": "monoco",
            "submodule": "monoco-db"
        },
        {
            "file": "src/db.js",
            "line": 807,
            "description": "Export a monoco sub-system.",
            "itemtype": "method",
            "name": "subsystem",
            "params": [
                {
                    "name": "params",
                    "description": "parameters",
                    "type": "JSON"
                }
            ],
            "return": {
                "description": "a stringified monoco sub-system",
                "type": "String"
            },
            "example": [
                "\n$db.subsystem({\"schemas\":{\"name\":\"Person\"}}); // filter export on schemas <br>\n$db.subsystem({\"types\":{\"name\":\"address\"}}); // filter export on types <br>\n$db.subsystem({\"behaviors\":{\"component\":\"laure\"}}); // filter export on behaviors <br>\n$db.subsystem({\"components\":{\"Person\": {\"country\": \"France\"}}}); // filter export on components <br>\n$db.subsystem({\"schemas\":{\"name\":\"Person\"},\"components\":{\"Person\": {\"country\": \"France\"}}}); // combine filters"
            ],
            "class": "monoco-db",
            "module": "monoco",
            "submodule": "monoco-db"
        },
        {
            "file": "src/db.js",
            "line": 823,
            "description": "Clear the database.",
            "itemtype": "method",
            "name": "clear",
            "class": "monoco-db",
            "module": "monoco",
            "submodule": "monoco-db"
        },
        {
            "file": "src/db.js",
            "line": 830,
            "description": "Init the database.",
            "itemtype": "method",
            "name": "init",
            "class": "monoco-db",
            "module": "monoco",
            "submodule": "monoco-db"
        },
        {
            "file": "src/helper.js",
            "line": 122,
            "description": "Get monoco instance.",
            "itemtype": "method",
            "name": "getMonoco",
            "return": {
                "description": "monoco instance",
                "type": "Monoco"
            },
            "class": "monoco-helper",
            "module": "monoco",
            "submodule": "monoco-helper"
        },
        {
            "file": "src/helper.js",
            "line": 130,
            "description": "Check if a monoco instance exists.",
            "itemtype": "method",
            "name": "isMonoco",
            "return": {
                "description": "true if a monoco instance exist",
                "type": "Boolean"
            },
            "class": "monoco-helper",
            "module": "monoco",
            "submodule": "monoco-helper"
        },
        {
            "file": "src/helper.js",
            "line": 138,
            "description": "Generate a uuid.",
            "itemtype": "method",
            "name": "generateId",
            "return": {
                "description": "a uuid",
                "type": "String"
            },
            "class": "monoco-helper",
            "module": "monoco",
            "submodule": "monoco-helper"
        },
        {
            "file": "src/log.js",
            "line": 385,
            "description": "A message send by the channel is invalid",
            "itemtype": "method",
            "name": "invalidChannelEvent",
            "params": [
                {
                    "name": "message",
                    "description": "message send",
                    "type": "String"
                },
                {
                    "name": "eventName",
                    "description": "name of the event",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "expected type",
                    "type": "String"
                }
            ],
            "class": "monoco-log",
            "module": "monoco",
            "submodule": "monoco-log"
        },
        {
            "file": "src/log.js",
            "line": 457,
            "description": "A property of a schema is unknown.",
            "itemtype": "method",
            "name": "unknownProperty",
            "params": [
                {
                    "name": "propertyName",
                    "description": "the name of the property",
                    "type": "String"
                },
                {
                    "name": "schema",
                    "description": "the schema definition",
                    "type": "Object"
                }
            ],
            "class": "monoco-log",
            "module": "monoco",
            "submodule": "monoco-log"
        },
        {
            "file": "src/log.js",
            "line": 466,
            "description": "Invalid type for a property.",
            "itemtype": "method",
            "name": "invalidPropertyType",
            "params": [
                {
                    "name": "propertyName",
                    "description": "name of the peropety",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "the type defined by the schema",
                    "type": "String"
                },
                {
                    "name": "property",
                    "description": "the property",
                    "type": "String"
                }
            ],
            "class": "monoco-log",
            "module": "monoco",
            "submodule": "monoco-log"
        },
        {
            "file": "src/log.js",
            "line": 476,
            "description": "Invalid value for a type enum.",
            "itemtype": "method",
            "name": "invalidEnumValue",
            "params": [
                {
                    "name": "value",
                    "description": "the value",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "the type defined by the schema",
                    "type": "String"
                }
            ],
            "class": "monoco-log",
            "module": "monoco",
            "submodule": "monoco-log"
        },
        {
            "file": "src/log.js",
            "line": 485,
            "description": "Invalid class name for a component.",
            "itemtype": "method",
            "name": "invalidClassName",
            "params": [
                {
                    "name": "componentId",
                    "description": "id of the component",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "the type defined by the schema",
                    "type": "String"
                },
                {
                    "name": "constructorName",
                    "description": "name of the component class",
                    "type": "String"
                }
            ],
            "class": "monoco-log",
            "module": "monoco",
            "submodule": "monoco-log"
        },
        {
            "file": "src/log.js",
            "line": 495,
            "description": "Missing a property.",
            "itemtype": "method",
            "name": "missingProperty",
            "params": [
                {
                    "name": "propertyName",
                    "description": "name of the property",
                    "type": "String"
                }
            ],
            "class": "monoco-log",
            "module": "monoco",
            "submodule": "monoco-log"
        },
        {
            "file": "src/log.js",
            "line": 503,
            "description": "A class definition is missing.",
            "itemtype": "method",
            "name": "missingImplementation",
            "params": [
                {
                    "name": "classSource",
                    "description": "a class",
                    "type": "String"
                },
                {
                    "name": "classToImp",
                    "description": "the class to implement",
                    "type": "String"
                }
            ],
            "class": "monoco-log",
            "module": "monoco",
            "submodule": "monoco-log"
        },
        {
            "file": "src/log.js",
            "line": 512,
            "description": "Invalid type for a property of a class definition.",
            "itemtype": "method",
            "name": "invalidTypeImp",
            "params": [
                {
                    "name": "property",
                    "description": "a property",
                    "type": "String"
                },
                {
                    "name": "className",
                    "description": "a class name",
                    "type": "String"
                }
            ],
            "class": "monoco-log",
            "module": "monoco",
            "submodule": "monoco-log"
        },
        {
            "file": "src/log.js",
            "line": 521,
            "description": "Missing a property for a class definition.",
            "itemtype": "method",
            "name": "missingPropertyImp",
            "params": [
                {
                    "name": "property",
                    "description": "a property",
                    "type": "String"
                },
                {
                    "name": "className",
                    "description": "a class name",
                    "type": "String"
                }
            ],
            "class": "monoco-log",
            "module": "monoco",
            "submodule": "monoco-log"
        },
        {
            "file": "src/log.js",
            "line": 530,
            "description": "Unkown property for a class definition.",
            "itemtype": "method",
            "name": "unknownPropertyImp",
            "params": [
                {
                    "name": "property",
                    "description": "a property",
                    "type": "String"
                },
                {
                    "name": "schema",
                    "description": "a schema",
                    "type": "Object"
                }
            ],
            "class": "monoco-log",
            "module": "monoco",
            "submodule": "monoco-log"
        },
        {
            "file": "src/log.js",
            "line": 539,
            "description": "Invalid type definition.",
            "itemtype": "method",
            "name": "invalidTypeDefinition",
            "params": [
                {
                    "name": "def",
                    "description": "a type definition",
                    "type": "Object"
                }
            ],
            "class": "monoco-log",
            "module": "monoco",
            "submodule": "monoco-log"
        },
        {
            "file": "src/log.js",
            "line": 547,
            "description": "Invalid property type.",
            "itemtype": "method",
            "name": "invalidPropertyName",
            "params": [
                {
                    "name": "id",
                    "description": "id of the component",
                    "type": "String"
                },
                {
                    "name": "propertyName",
                    "description": "name of the property",
                    "type": "String"
                },
                {
                    "name": "propertyValue",
                    "description": "value of the property",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "type defined by the schema",
                    "type": "String"
                }
            ],
            "class": "monoco-log",
            "module": "monoco",
            "submodule": "monoco-log"
        },
        {
            "file": "src/log.js",
            "line": 558,
            "description": "Trying to set a read-only property.",
            "itemtype": "method",
            "name": "readOnlyProperty",
            "params": [
                {
                    "name": "id",
                    "description": "id of the component",
                    "type": "String"
                },
                {
                    "name": "propertyName",
                    "description": "name of the property",
                    "type": "String"
                }
            ],
            "class": "monoco-log",
            "module": "monoco",
            "submodule": "monoco-log"
        },
        {
            "file": "src/log.js",
            "line": 567,
            "description": "Invalid document on a monoco database insert operation.",
            "itemtype": "method",
            "name": "invalidDocumentOnDbInsert",
            "params": [
                {
                    "name": "doc",
                    "description": "a document",
                    "type": "String"
                },
                {
                    "name": "collectionName",
                    "description": "the name of the colllection",
                    "type": "String"
                }
            ],
            "class": "monoco-log",
            "module": "monoco",
            "submodule": "monoco-log"
        },
        {
            "file": "src/log.js",
            "line": 576,
            "description": "Invalid property on a monoco database update operation.",
            "itemtype": "method",
            "name": "invalidPropertyTypeOnDbUpdate",
            "params": [
                {
                    "name": "collectionName",
                    "description": "the name of the colllection",
                    "type": "String"
                },
                {
                    "name": "id",
                    "description": "id of the component",
                    "type": "String"
                },
                {
                    "name": "propertyName",
                    "description": "name of the property",
                    "type": "String"
                },
                {
                    "name": "propertyValue",
                    "description": "value of the property",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "expected type defined by the schema",
                    "type": "String"
                }
            ],
            "class": "monoco-log",
            "module": "monoco",
            "submodule": "monoco-log"
        },
        {
            "file": "src/log.js",
            "line": 588,
            "description": "Call an unknown method of a class.",
            "itemtype": "method",
            "name": "unknownMethod",
            "params": [
                {
                    "name": "classId",
                    "description": "id of the class",
                    "type": "String"
                },
                {
                    "name": "methodName",
                    "description": "name of the method",
                    "type": "String"
                }
            ],
            "class": "monoco-log",
            "module": "monoco",
            "submodule": "monoco-log"
        },
        {
            "file": "src/log.js",
            "line": 597,
            "description": "Try to create an invalid MonocoDatabaseCollection.",
            "itemtype": "method",
            "name": "invalidCollectionName",
            "params": [
                {
                    "name": "name",
                    "description": "name of the collection",
                    "type": "String"
                }
            ],
            "class": "monoco-log",
            "module": "monoco",
            "submodule": "monoco-log"
        },
        {
            "file": "src/log.js",
            "line": 605,
            "description": "Invalid result type of a method.",
            "itemtype": "method",
            "name": "invalidResultType",
            "params": [
                {
                    "name": "id",
                    "description": "id of the component",
                    "type": "String"
                },
                {
                    "name": "methodName",
                    "description": "name ot the method",
                    "type": "String"
                }
            ],
            "class": "monoco-log",
            "module": "monoco",
            "submodule": "monoco-log"
        },
        {
            "file": "src/log.js",
            "line": 614,
            "description": "Unknown class.",
            "itemtype": "method",
            "name": "unknownComponent",
            "params": [
                {
                    "name": "id",
                    "description": "id of the class",
                    "type": "String"
                },
                {
                    "name": "componentId",
                    "description": "if of the component",
                    "type": "String"
                }
            ],
            "class": "monoco-log",
            "module": "monoco",
            "submodule": "monoco-log"
        },
        {
            "file": "src/log.js",
            "line": 623,
            "description": "The monoco workflow has been restarted.",
            "itemtype": "method",
            "name": "workflowRestarted",
            "class": "monoco-log",
            "module": "monoco",
            "submodule": "monoco-log"
        },
        {
            "file": "src/log.js",
            "line": 630,
            "description": "Invalid parameter number for a method.",
            "itemtype": "method",
            "name": "invalidParamNumber",
            "params": [
                {
                    "name": "id",
                    "description": "id of the component",
                    "type": "String"
                },
                {
                    "name": "methodName",
                    "description": "name of the component",
                    "type": "String"
                }
            ],
            "class": "monoco-log",
            "module": "monoco",
            "submodule": "monoco-log"
        },
        {
            "file": "src/log.js",
            "line": 639,
            "description": "Invalid type parameters for a method.",
            "itemtype": "method",
            "name": "invalidParamType",
            "params": [
                {
                    "name": "id",
                    "description": "id of the component",
                    "type": "String"
                },
                {
                    "name": "methodName",
                    "description": "name of the component",
                    "type": "String"
                },
                {
                    "name": "paramName",
                    "description": "name of the parameter",
                    "type": "String"
                }
            ],
            "class": "monoco-log",
            "module": "monoco",
            "submodule": "monoco-log"
        },
        {
            "file": "src/log.js",
            "line": 650,
            "description": "Add a more than one behavior to a state.",
            "itemtype": "method",
            "name": "behaviorNotUnique",
            "params": [
                {
                    "name": "id",
                    "description": "id of the class",
                    "type": "String"
                },
                {
                    "name": "stateName",
                    "description": "name of the state",
                    "type": "String"
                }
            ],
            "class": "monoco-log",
            "module": "monoco",
            "submodule": "monoco-log"
        },
        {
            "file": "src/log.js",
            "line": 659,
            "description": "Can not add a behavior with an invalid state.",
            "itemtype": "method",
            "name": "invalidStateOn",
            "params": [
                {
                    "name": "id",
                    "description": "id of the class",
                    "type": "String"
                },
                {
                    "name": "stateName",
                    "description": "name of the state",
                    "type": "String"
                }
            ],
            "class": "monoco-log",
            "module": "monoco",
            "submodule": "monoco-log"
        },
        {
            "file": "src/log.js",
            "line": 668,
            "description": "The call to a remove state of the behavior module is invalid.",
            "itemtype": "method",
            "name": "invalidStateOff",
            "params": [
                {
                    "name": "id",
                    "description": "id of the class",
                    "type": "String"
                },
                {
                    "name": "stateName",
                    "description": "name of the state",
                    "type": "String"
                }
            ],
            "class": "monoco-log",
            "module": "monoco",
            "submodule": "monoco-log"
        },
        {
            "file": "src/log.js",
            "line": 677,
            "description": "The master system is not found.",
            "itemtype": "method",
            "name": "masterSystemNotFound",
            "class": "monoco-log",
            "module": "monoco",
            "submodule": "monoco-log"
        },
        {
            "file": "src/log.js",
            "line": 684,
            "description": "Invalid type.",
            "itemtype": "method",
            "name": "invalidType",
            "params": [
                {
                    "name": "value",
                    "description": "value of the type",
                    "type": "Object"
                },
                {
                    "name": "typeName",
                    "description": "expectec type defined by the schema",
                    "type": "String"
                }
            ],
            "class": "monoco-log",
            "module": "monoco",
            "submodule": "monoco-log"
        },
        {
            "file": "src/log.js",
            "line": 693,
            "description": "Unknown type.",
            "itemtype": "method",
            "name": "unknownType",
            "params": [
                {
                    "name": "value",
                    "description": "value",
                    "type": "String"
                }
            ],
            "class": "monoco-log",
            "module": "monoco",
            "submodule": "monoco-log"
        },
        {
            "file": "src/log.js",
            "line": 701,
            "description": "A component has not been alreay created.",
            "itemtype": "method",
            "name": "canNotYetValidate",
            "params": [
                {
                    "name": "id",
                    "description": "id of the component",
                    "type": "String"
                },
                {
                    "name": "className",
                    "description": "name of the class",
                    "type": "String"
                }
            ],
            "class": "monoco-log",
            "module": "monoco",
            "submodule": "monoco-log"
        },
        {
            "file": "src/log.js",
            "line": 710,
            "description": "A message send by the channel is invalid",
            "itemtype": "method",
            "name": "invalidChannelEvent",
            "params": [
                {
                    "name": "message",
                    "description": "message send",
                    "type": "String"
                },
                {
                    "name": "eventName",
                    "description": "name of the event",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "expected type",
                    "type": "String"
                }
            ],
            "class": "monoco-log",
            "module": "monoco",
            "submodule": "monoco-log"
        },
        {
            "file": "src/log.js",
            "line": 720,
            "description": "invalid parameter number for an action add with on method.",
            "itemtype": "method",
            "name": "invalidParamNumberMethodOn",
            "params": [
                {
                    "name": "id",
                    "description": "id of the component",
                    "type": "String"
                },
                {
                    "name": "methodName",
                    "description": "name of the component",
                    "type": "String"
                }
            ],
            "class": "monoco-log",
            "module": "monoco",
            "submodule": "monoco-log"
        },
        {
            "file": "src/log.js",
            "line": 729,
            "description": "Create a component with an id that is already used.",
            "itemtype": "method",
            "name": "idAlreadyUsed",
            "params": [
                {
                    "name": "id",
                    "description": "id of the component",
                    "type": "String"
                }
            ],
            "class": "monoco-log",
            "module": "monoco",
            "submodule": "monoco-log"
        },
        {
            "file": "src/log.js",
            "line": 737,
            "description": "Change the id of a component.",
            "itemtype": "method",
            "name": "updateUuid",
            "params": [
                {
                    "name": "currentId",
                    "description": "id of the component",
                    "type": "String"
                },
                {
                    "name": "newId",
                    "description": "of the component",
                    "type": "String"
                },
                {
                    "name": "alreadyUsed",
                    "description": "newId already used",
                    "type": "Boolean"
                }
            ],
            "class": "monoco-log",
            "module": "monoco",
            "submodule": "monoco-log"
        },
        {
            "file": "src/log.js",
            "line": 747,
            "description": "Unkonw property on a monoco database update operation.",
            "itemtype": "method",
            "name": "unknownPropertyOnDbUpdate",
            "params": [
                {
                    "name": "propertyName",
                    "description": "name of the property",
                    "type": "String"
                },
                {
                    "name": "id",
                    "description": "id of the component",
                    "type": "String"
                }
            ],
            "class": "monoco-log",
            "module": "monoco",
            "submodule": "monoco-log"
        },
        {
            "file": "src/log.js",
            "line": 756,
            "description": "Try to change the state of a component that has been destroyed",
            "itemtype": "method",
            "name": "invalideUseOfComponent",
            "params": [
                {
                    "name": "id",
                    "description": "id of the component",
                    "type": "String"
                }
            ],
            "class": "monoco-log",
            "module": "monoco",
            "submodule": "monoco-log"
        },
        {
            "file": "src/metamodel.js",
            "line": 1407,
            "description": "Init the metamodel.",
            "itemtype": "method",
            "name": "init",
            "class": "monoco-metamodel",
            "module": "monoco",
            "submodule": "monoco-metamodel"
        },
        {
            "file": "src/metamodel.js",
            "line": 1414,
            "description": "Remove the data of the metamodel from the memory.",
            "itemtype": "method",
            "name": "clear",
            "class": "monoco-metamodel",
            "module": "monoco",
            "submodule": "monoco-metamodel"
        },
        {
            "file": "src/metamodel.js",
            "line": 1421,
            "description": "Add a new schema.",
            "itemtype": "method",
            "name": "schema",
            "params": [
                {
                    "name": "importedSchema",
                    "description": "a schema to add",
                    "type": "JSON"
                }
            ],
            "class": "monoco-metamodel",
            "module": "monoco",
            "submodule": "monoco-metamodel"
        },
        {
            "file": "src/metamodel.js",
            "line": 1429,
            "description": "Add a new type.",
            "itemtype": "method",
            "name": "type",
            "params": [
                {
                    "name": "importedType",
                    "description": "type to add",
                    "type": "JSON"
                }
            ],
            "class": "monoco-metamodel",
            "module": "monoco",
            "submodule": "monoco-metamodel"
        },
        {
            "file": "src/metamodel.js",
            "line": 1437,
            "description": "Create the metamodel.",
            "itemtype": "method",
            "name": "create",
            "class": "monoco-metamodel",
            "module": "monoco",
            "submodule": "monoco-metamodel"
        },
        {
            "file": "src/metamodel.js",
            "line": 1444,
            "description": "Get a schema.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "id",
                    "description": "id of the schema",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the schema",
                "type": "Object"
            },
            "class": "monoco-metamodel",
            "module": "monoco",
            "submodule": "monoco-metamodel"
        },
        {
            "file": "src/metamodel.js",
            "line": 1453,
            "description": "Get the definition of the metamodel.",
            "itemtype": "method",
            "name": "getMetaDef",
            "return": {
                "description": "the metadefinition of the metamodel",
                "type": "Object"
            },
            "class": "monoco-metamodel",
            "module": "monoco",
            "submodule": "monoco-metamodel"
        },
        {
            "file": "src/metamodel.js",
            "line": 1461,
            "description": "Get parents of a shema if any.",
            "itemtype": "method",
            "name": "getParents",
            "params": [
                {
                    "name": "id",
                    "description": "id of the schema",
                    "type": "String"
                }
            ],
            "return": {
                "description": "id id of the parents",
                "type": "Array"
            },
            "class": "monoco-metamodel",
            "module": "monoco",
            "submodule": "monoco-metamodel"
        },
        {
            "file": "src/metamodel.js",
            "line": 1470,
            "description": "Check if a class inherits from another one",
            "itemtype": "method",
            "name": "inheritFrom",
            "params": [
                {
                    "name": "name",
                    "description": "name of the class",
                    "type": "String"
                },
                {
                    "name": "parentName",
                    "description": "name of the parent",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true if the component inherit from the specific class name",
                "type": "Boolean"
            },
            "class": "monoco-metamodel",
            "module": "monoco",
            "submodule": "monoco-metamodel"
        },
        {
            "file": "src/metamodel.js",
            "line": 1480,
            "description": "Check if the object is compliant with the schema.\nUse it to test if the constructor of an object is compliant\nwith the definition of the class.",
            "itemtype": "method",
            "name": "isValidObject",
            "params": [
                {
                    "name": "object",
                    "description": "object to validate",
                    "type": "Object"
                },
                {
                    "name": "schema",
                    "description": "schema that validates the object",
                    "type": "Object"
                },
                {
                    "name": "strict",
                    "description": "true if validation is strict",
                    "type": "Boolean"
                },
                {
                    "name": "cleanRef",
                    "description": "true if we remove the reference to the object",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "true is the object is compliant with the schema",
                "type": "Boolean"
            },
            "class": "monoco-metamodel",
            "module": "monoco",
            "submodule": "monoco-metamodel"
        },
        {
            "file": "src/metamodel.js",
            "line": 1494,
            "description": "Prepare the object in order to be compliant with the schema.",
            "itemtype": "method",
            "name": "prepareObject",
            "params": [
                {
                    "name": "object",
                    "description": "object to prepare",
                    "type": "Object"
                },
                {
                    "name": "schema",
                    "description": "schema that validates the object",
                    "type": "Object"
                }
            ],
            "class": "monoco-metamodel",
            "module": "monoco",
            "submodule": "monoco-metamodel"
        },
        {
            "file": "src/metamodel.js",
            "line": 1503,
            "description": "Check if a value is compliant with a type.",
            "itemtype": "method",
            "name": "isValidType",
            "params": [
                {
                    "name": "object",
                    "description": "object to validate",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "type to use for validation",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true if the object is compliant with the type",
                "type": "Boolean"
            },
            "class": "monoco-metamodel",
            "module": "monoco",
            "submodule": "monoco-metamodel"
        },
        {
            "file": "src/metamodel.js",
            "line": 1513,
            "description": "Check if a value is compliant with a type enum.",
            "itemtype": "method",
            "name": "isValidEnum",
            "params": [
                {
                    "name": "value",
                    "description": "value to validate",
                    "type": "String|Object"
                },
                {
                    "name": "schema",
                    "description": "schema to use for validation",
                    "type": "Schema"
                }
            ],
            "return": {
                "description": "true if the object is compliant with the enum",
                "type": "Boolean"
            },
            "class": "monoco-metamodel",
            "module": "monoco",
            "submodule": "monoco-metamodel"
        },
        {
            "file": "src/metamodel.js",
            "line": 1523,
            "description": "Check if the name is a correct state for the component.",
            "itemtype": "method",
            "name": "isValidState",
            "params": [
                {
                    "name": "name",
                    "description": "name of the state",
                    "type": "String"
                },
                {
                    "name": "id",
                    "description": "component id",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true if the name is a correct state for the component",
                "type": "Boolean"
            },
            "class": "monoco-metamodel",
            "module": "monoco",
            "submodule": "monoco-metamodel"
        },
        {
            "file": "src/metamodel.js",
            "line": 1533,
            "description": "Check if an attribute of the schema is an event.",
            "itemtype": "method",
            "name": "isEvent",
            "params": [
                {
                    "name": "name",
                    "description": "name of the attribute",
                    "type": "String"
                },
                {
                    "name": "id",
                    "description": "component id",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true if the attribute is an event",
                "type": "Boolean"
            },
            "class": "monoco-metamodel",
            "module": "monoco",
            "submodule": "monoco-metamodel"
        },
        {
            "file": "src/metamodel.js",
            "line": 1543,
            "description": "Check if an attribute of the schema is a property.",
            "itemtype": "method",
            "name": "isProperty",
            "params": [
                {
                    "name": "name",
                    "description": "name of the property",
                    "type": "String"
                },
                {
                    "name": "id",
                    "description": "component id",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true if the attribute is a property",
                "type": "Boolean"
            },
            "class": "monoco-metamodel",
            "module": "monoco",
            "submodule": "monoco-metamodel"
        },
        {
            "file": "src/metamodel.js",
            "line": 1553,
            "description": "Check if an attribute of the schema is a collection.",
            "itemtype": "method",
            "name": "isCollection",
            "params": [
                {
                    "name": "name",
                    "description": "name of the collection",
                    "type": "String"
                },
                {
                    "name": "id",
                    "description": "component id",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true if the attribute is a collection",
                "type": "Boolean"
            },
            "class": "monoco-metamodel",
            "module": "monoco",
            "submodule": "monoco-metamodel"
        },
        {
            "file": "src/metamodel.js",
            "line": 1563,
            "description": "Check if an attribute of the schema is a method.",
            "itemtype": "method",
            "name": "isMethod",
            "params": [
                {
                    "name": "name",
                    "description": "name of the method",
                    "type": "String"
                },
                {
                    "name": "id",
                    "description": "component id",
                    "type": "String"
                }
            ],
            "return": {
                "description": "true if the attribute is a method",
                "type": "Boolean"
            },
            "class": "monoco-metamodel",
            "module": "monoco",
            "submodule": "monoco-metamodel"
        },
        {
            "file": "src/monoco.js",
            "line": 81,
            "description": "monoco instance.",
            "itemtype": "property",
            "name": "monoco",
            "type": "Monoco",
            "class": "monoco",
            "module": "monoco"
        },
        {
            "file": "src/state.js",
            "line": 105,
            "description": "Set the state of a component.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "id",
                    "description": "component id on which change the state",
                    "type": "String"
                },
                {
                    "name": "state",
                    "description": "the new state of the component",
                    "type": "String"
                }
            ],
            "class": "monoco-state",
            "module": "monoco",
            "submodule": "monoco-state"
        },
        {
            "file": "src/state.js",
            "line": 114,
            "description": "Get the state of a component.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "id",
                    "description": "id of the component",
                    "type": "String"
                }
            ],
            "return": {
                "description": "the state of the component.",
                "type": "String"
            },
            "class": "monoco-state",
            "module": "monoco",
            "submodule": "monoco-state"
        },
        {
            "file": "src/state.js",
            "line": 123,
            "description": "Remove all the states of the components from the memory.",
            "itemtype": "method",
            "name": "clear",
            "class": "monoco-state",
            "module": "monoco",
            "submodule": "monoco-state"
        },
        {
            "file": "src/workflow.js",
            "line": 720,
            "description": "Change the state of a component.\n\nWorklow:<br>\n<br>\n0. Check if the component has not been destroyed <br>\n1. Check if the state is a method or an event <br>\n2. Search if there is a behavior with an action for the new state <br>\n3. If so, get the action(s) <br>\n4. Check if the conditons on input are compliant with the metamodel <br>\n5. Call the action(s) <br>\n6. If not an of event, check if the conditons on input are compliant with the metamodel <br>\n7. If all is ok, the state of the component is updated <br>\n8. Return the result <br>",
            "itemtype": "method",
            "name": "state",
            "params": [
                {
                    "name": "params",
                    "description": "params to change the state <br>\n{String} component id of the component <br>\n{String} state state of the component <br>\n{Array} data parameters to send to the action",
                    "type": "Object"
                }
            ],
            "class": "monoco-workflow",
            "module": "monoco",
            "submodule": "monoco-workflow"
        },
        {
            "file": "src/workflow.js",
            "line": 744,
            "description": "Stop the workflow engine.",
            "itemtype": "method",
            "name": "stop",
            "params": [
                {
                    "name": "params",
                    "description": "parameters <br>\n{Boolean} error true if the stop of the workflow is due to an error (default false) <br>\n{String} message error message to log (default '')",
                    "type": "Object"
                }
            ],
            "class": "monoco-workflow",
            "module": "monoco",
            "submodule": "monoco-workflow"
        },
        {
            "file": "src/workflow.js",
            "line": 754,
            "description": "Restart the workflow engine from the last state.",
            "itemtype": "method",
            "name": "restart",
            "class": "monoco-workflow",
            "module": "monoco",
            "submodule": "monoco-workflow"
        },
        {
            "file": "src/workflow.js",
            "line": 761,
            "description": "Check if conditions on input are compliant with the model before calling the action.",
            "itemtype": "method",
            "name": "checkParams",
            "params": [
                {
                    "name": "params",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "true if condition on input are compliant with the model",
                "type": "Boolean"
            },
            "class": "monoco-workflow",
            "module": "monoco",
            "submodule": "monoco-workflow"
        },
        {
            "file": "src/workflow.js",
            "line": 770,
            "description": "Check if an action has the valid number of parameter.",
            "itemtype": "method",
            "name": "validParamNumbers",
            "params": [
                {
                    "name": "className",
                    "description": "name the class",
                    "type": "String"
                },
                {
                    "name": "state",
                    "description": "state on which the action applied",
                    "type": "String"
                },
                {
                    "name": "action",
                    "description": "action",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "true if the action is the valid number of parameters",
                "type": "Boolean"
            },
            "class": "monoco-workflow",
            "module": "monoco",
            "submodule": "monoco-workflow"
        },
        {
            "file": "src/workflow.js",
            "line": 781,
            "description": "Call an action that comes from an event.",
            "itemtype": "method",
            "name": "action",
            "params": [
                {
                    "name": "behaviorId",
                    "description": "id of the behavior",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "parameters",
                    "type": "Array"
                }
            ],
            "class": "monoco-workflow",
            "module": "monoco",
            "submodule": "monoco-workflow"
        },
        {
            "file": "build/system/system.js",
            "line": 969,
            "description": "monoco core system",
            "itemtype": "property",
            "name": "system",
            "type": "MonocoSystem",
            "class": "monoco-system",
            "module": "monoco",
            "submodule": "monoco-system"
        }
    ],
    "warnings": []
}