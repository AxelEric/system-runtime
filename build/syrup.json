{
	"name": "syrup",
	"version": "0.9.5",
	"description": "The System Runtime Platform",
	"_id": "e89c617b6b15d24",
	"schemas": {
		"SyrupSchema": {
			"load": "method",
			"ready": "event",
			"_id": "SyrupSchema",
			"_name": "SyrupSchema",
			"_inherit": [
				"SyrupComponentSchema"
			],
			"_core": true,
			"version": "property",
			"system": "method",
			"warning": "event"
		},
		"Syrup": {
			"load": {
				"params": [
					{
						"name": "url",
						"type": "string"
					},
					{
						"name": "async",
						"type": "boolean",
						"mandatory": false,
						"default": true
					}
				]
			},
			"ready": {},
			"_id": "Syrup",
			"_name": "Syrup",
			"_schema": "SyrupSchema",
			"_inherit": [
				"SyrupComponent"
			],
			"_core": true,
			"version": {
				"type": "string",
				"readOnly": true,
				"mandatory": true,
				"default": "0.0.0"
			},
			"warning": {
				"params": [
					{
						"name": "message",
						"type": "string"
					}
				]
			},
			"system": {
				"params": [
					{
						"name": "name",
						"type": "string",
						"mandatory": false
					}
				],
				"result": "object"
			}
		},
		"SyrupBehavior": {
			"_id": "SyrupBehavior",
			"_name": "SyrupBehavior",
			"_schema": "SyrupBehaviorSchema",
			"_inherit": [
				"SyrupComponent"
			],
			"_core": true,
			"core": {
				"type": "boolean",
				"readOnly": false,
				"mandatory": false,
				"default": false
			},
			"useCoreAPI": {
				"type": "boolean",
				"readOnly": false,
				"mandatory": false,
				"default": false
			},
			"component": {
				"type": "string",
				"readOnly": false,
				"mandatory": true,
				"default": ""
			},
			"action": {
				"type": "javascript",
				"readOnly": false,
				"mandatory": true,
				"default": ""
			},
			"state": {
				"type": "string",
				"readOnly": false,
				"mandatory": true,
				"default": ""
			}
		},
		"SyrupBehaviorSchema": {
			"_id": "SyrupBehaviorSchema",
			"_name": "SyrupBehaviorSchema",
			"_inherit": [
				"SyrupComponentSchema"
			],
			"_core": true,
			"core": "property",
			"component": "property",
			"action": "property",
			"state": "property",
			"useCoreAPI": "property"
		},
		"SyrupChannel": {
			"_id": "SyrupChannel",
			"_name": "SyrupChannel",
			"_schema": "SyrupChannelSchema",
			"_inherit": [
				"SyrupComponent",
				"SyrupChannelEvent"
			],
			"_core": true,
			"send": {
				"params": [
					{
						"name": "message",
						"type": "object"
					}
				]
			}
		},
		"SyrupChannelEvent": {
			"_id": "SyrupChannelEvent",
			"_name": "SyrupChannelEvent",
			"_schema": "SyrupChannelEventSchema",
			"_core": true
		},
		"SyrupChannelEventSchema": {
			"_id": "SyrupChannelEventSchema",
			"_name": "SyrupChannelEventSchema",
			"_core": true
		},
		"SyrupChannelSchema": {
			"_id": "SyrupChannelSchema",
			"_name": "SyrupChannelSchema",
			"_inherit": [
				"SyrupComponentSchema",
				"SyrupChannelEventSchema"
			],
			"_core": true,
			"send": "event"
		},
		"SyrupClassInfo": {
			"_id": "SyrupClassInfo",
			"_name": "SyrupClassInfo",
			"_schema": "SyrupClassInfoSchema",
			"_inherit": [
				"SyrupComponent"
			],
			"_core": true,
			"metamodel": {
				"type": "object",
				"readOnly": true,
				"mandatory": true,
				"default": {}
			},
			"model": {
				"type": "object",
				"readOnly": true,
				"mandatory": true,
				"default": {}
			},
			"property": {
				"params": [
					{
						"name": "name",
						"type": "string"
					}
				],
				"result": "object"
			},
			"properties": {
				"result": "array"
			},
			"method": {
				"params": [
					{
						"name": "name",
						"type": "string"
					}
				],
				"result": "object"
			},
			"methods": {
				"result": "array"
			},
			"collection": {
				"params": [
					{
						"name": "name",
						"type": "string"
					}
				],
				"result": "object"
			},
			"collections": {
				"result": "array"
			},
			"event": {
				"params": [
					{
						"name": "name",
						"type": "string"
					}
				],
				"result": "object"
			},
			"events": {
				"result": "array"
			}
		},
		"SyrupClassInfoSchema": {
			"_id": "SyrupClassInfoSchema",
			"_name": "SyrupClassInfoSchema",
			"_inherit": [
				"SyrupComponentSchema"
			],
			"_core": true,
			"model": "property",
			"metamodel": "property",
			"method": "method",
			"methods": "method",
			"property": "method",
			"properties": "method",
			"collections": "method",
			"collection": "method",
			"event": "method",
			"events": "method"
		},
		"SyrupComponent": {
			"_id": "SyrupComponent",
			"_name": "SyrupComponent",
			"_schema": "SyrupComponentSchema",
			"_core": true,
			"on": {
				"params": [
					{
						"name": "state",
						"type": "string"
					},
					{
						"name": "handler",
						"type": "function"
					},
					{
						"name": "useCoreAPI",
						"type": "boolean",
						"mandatory": false
					}
				]
			},
			"off": {
				"params": [
					{
						"name": "state",
						"type": "string"
					},
					{
						"name": "behaviorId",
						"type": "string",
						"mandatory": false
					}
				]
			},
			"require": {
				"params": [
					{
						"name": "id",
						"type": "string"
					}
				]
			},
			"destroy": {
				"params": []
			},
			"classInfo": {
				"type": "@SyrupClassInfo",
				"readOnly": false,
				"mandatory": false,
				"default": {}
			},
			"init": {
				"params": [
					{
						"name": "conf",
						"type": "object"
					}
				]
			},
			"error": {
				"params": [
					{
						"name": "data",
						"type": "errorParam"
					}
				]
			}
		},
		"SyrupComponentSchema": {
			"_id": "SyrupComponentSchema",
			"_name": "SyrupComponentSchema",
			"_core": true,
			"classInfo": "property",
			"on": "method",
			"off": "method",
			"require": "method",
			"destroy": "method",
			"init": "method",
			"error": "event"
		},
		"SyrupDatabase": {
			"_id": "SyrupDatabase",
			"_name": "SyrupDatabase",
			"_schema": "SyrupDatabaseSchema",
			"_inherit": [
				"SyrupComponent"
			],
			"_core": true,
			"system": {
				"params": [
					{
						"name": "system",
						"type": "object",
						"mandatory": false
					}
				],
				"result": "string"
			},
			"subsystem": {
				"params": [
					{
						"name": "params",
						"type": "object"
					}
				],
				"result": "string"
			},
			"collections": {
				"result": "object"
			},
			"insert": {
				"params": [
					{
						"name": "classId",
						"type": "string"
					},
					{
						"name": "object",
						"type": "object"
					}
				]
			},
			"update": {
				"params": [
					{
						"name": "schema",
						"type": "string"
					},
					{
						"name": "componentId",
						"type": "string"
					},
					{
						"name": "attributeName",
						"type": "string"
					},
					{
						"name": "attributeValue",
						"type": "object"
					}
				]
			},
			"remove": {
				"params": [
					{
						"name": "classId",
						"type": "string"
					},
					{
						"name": "object",
						"type": "string"
					}
				]
			}
		},
		"SyrupDatabaseSchema": {
			"_id": "SyrupDatabaseSchema",
			"_name": "SyrupDatabaseSchema",
			"_inherit": [
				"SyrupComponentSchema"
			],
			"_core": true,
			"system": "method",
			"subsystem": "method",
			"collections": "method",
			"insert": "event",
			"update": "event",
			"remove": "event"
		},
		"SyrupMessage": {
			"_id": "SyrupMessage",
			"_name": "SyrupMessage",
			"_schema": "SyrupMessageSchema",
			"_core": true,
			"event": {
				"type": "string",
				"readOnly": false,
				"mandatory": true,
				"default": ""
			},
			"from": {
				"type": "string",
				"readOnly": false,
				"mandatory": true,
				"default": ""
			},
			"data": {
				"type": "array",
				"readOnly": false,
				"mandatory": true,
				"default": []
			}
		},
		"SyrupMessageSchema": {
			"_id": "SyrupMessageSchema",
			"_name": "SyrupMessageSchema",
			"_core": true,
			"event": "property",
			"from": "property",
			"data": "property"
		},
		"SyrupMetamodel": {
			"_id": "SyrupMetamodel",
			"_name": "SyrupMetamodel",
			"_schema": "SyrupMetamodelSchema",
			"_inherit": [
				"SyrupComponent"
			],
			"_core": true,
			"schema": {
				"params": [
					{
						"name": "schema",
						"type": "object"
					}
				]
			},
			"type": {
				"params": [
					{
						"name": "type",
						"type": "object"
					}
				]
			},
			"create": {
				"params": []
			}
		},
		"SyrupMetamodelSchema": {
			"_id": "SyrupMetamodelSchema",
			"_name": "SyrupMetamodelSchema",
			"_inherit": [
				"SyrupComponentSchema"
			],
			"_core": true,
			"schema": "method",
			"type": "method",
			"create": "method"
		},
		"SyrupState": {
			"_id": "SyrupState",
			"_name": "SyrupState",
			"_schema": "SyrupStateSchema",
			"_class": false,
			"_core": true,
			"name": {
				"type": "string",
				"readOnly": false,
				"mandatory": true,
				"default": ""
			},
			"parameters": {
				"type": "object",
				"readOnly": false,
				"mandatory": false,
				"default": {}
			}
		},
		"SyrupStateSchema": {
			"_id": "SyrupStateSchema",
			"_name": "SyrupStateSchema",
			"_core": true,
			"name": "property",
			"parameters": "property"
		},
		"SyrupSystem": {
			"_id": "SyrupSystem",
			"_name": "SyrupSystem",
			"_schema": "SyrupSystemSchema",
			"_inherit": [
				"SyrupComponent"
			],
			"_core": true,
			"name": {
				"type": "string",
				"readOnly": false,
				"mandatory": true,
				"default": ""
			},
			"master": {
				"type": "boolean",
				"readOnly": false,
				"mandatory": false,
				"default": false
			},
			"subsystem": {
				"type": "boolean",
				"readOnly": false,
				"mandatory": false,
				"default": false
			},
			"version": {
				"type": "string",
				"readOnly": false,
				"mandatory": false,
				"default": "0.0.1"
			},
			"description": {
				"type": "string",
				"readOnly": false,
				"mandatory": false,
				"default": ""
			},
			"schemas": {
				"type": "object",
				"readOnly": false,
				"mandatory": false,
				"default": {}
			},
			"behaviors": {
				"type": "object",
				"readOnly": false,
				"mandatory": false,
				"default": {}
			},
			"types": {
				"type": "object",
				"readOnly": false,
				"mandatory": false,
				"default": {}
			},
			"components": {
				"type": "object",
				"readOnly": false,
				"mandatory": false,
				"default": {}
			},
			"ready": {},
			"sync": {},
			"main": {}
		},
		"SyrupSystemSchema": {
			"_id": "SyrupSystemSchema",
			"_name": "SyrupSystemSchema",
			"_inherit": [
				"SyrupComponentSchema"
			],
			"_core": true,
			"name": "property",
			"master": "property",
			"subsystem": "property",
			"version": "property",
			"description": "property",
			"schemas": "property",
			"behaviors": "property",
			"types": "property",
			"components": "property",
			"sync": "method",
			"main": "method",
			"ready": "event"
		}
	},
	"types": {
		"html": {
			"name": "html",
			"type": "string",
			"core": true
		},
		"css": {
			"name": "css",
			"type": "string",
			"core": true
		},
		"collection": {
			"name": "collection",
			"type": "object",
			"schema": {
				"type": {
					"type": [
						"string"
					],
					"mandatory": true
				},
				"readOnly": {
					"type": "boolean",
					"mandatory": true
				},
				"mandatory": {
					"type": "boolean",
					"mandatory": true
				},
				"default": {
					"type": "object",
					"mandatory": true
				}
			},
			"core": true
		},
		"errorParam": {
			"name": "errorParam",
			"type": "object",
			"schema": {
				"message": {
					"type": "string",
					"mandatory": true
				},
				"error": {
					"type": "object",
					"mandatory": true
				}
			},
			"core": true
		},
		"event": {
			"name": "event",
			"type": "object",
			"schema": {
				"params": {
					"type": [
						"parameter"
					],
					"mandatory": false
				}
			},
			"core": true
		},
		"javascript": {
			"name": "javascript",
			"type": "string",
			"core": true
		},
		"message": {
			"name": "message",
			"type": "object",
			"schema": {
				"event": {
					"type": "string",
					"mandatory": true
				},
				"from": {
					"type": "string",
					"mandatory": false
				},
				"data": {
					"type": "object",
					"mandatory": true
				}
			},
			"core": true
		},
		"method": {
			"name": "method",
			"type": "object",
			"schema": {
				"result": {
					"type": "string",
					"mandatory": false
				},
				"params": {
					"type": [
						"parameter"
					],
					"mandatory": false
				}
			},
			"core": true
		},
		"parameter": {
			"name": "parameter",
			"type": "object",
			"schema": {
				"name": {
					"type": "string",
					"mandatory": true
				},
				"type": {
					"type": "string",
					"mandatory": true
				},
				"mandatory": {
					"type": "boolean",
					"mandatory": false
				},
				"default": {
					"type": "@type",
					"mandatory": false
				}
			},
			"core": true
		},
		"property": {
			"name": "property",
			"type": "object",
			"schema": {
				"type": {
					"type": "string",
					"mandatory": true
				},
				"readOnly": {
					"type": "boolean",
					"mandatory": true
				},
				"mandatory": {
					"type": "boolean",
					"mandatory": true
				},
				"default": {
					"type": "@type",
					"mandatory": true
				}
			},
			"core": true
		}
	},
	"behaviors": {
		"1aaee1e6311ff39": {
			"_id": "1aaee1e6311ff39",
			"component": "syrup",
			"state": "load",
			"action": "function load(url, async) {\n    var xhr = null,\n    callbackLoad = null;\n    xhr = new XMLHttpRequest();\n    \n    callbackLoad = function callbackLoad(system) {\n        var sysId = $db.system(system),\n        sys = $component.get(sysId),\n        systems = document.querySelectorAll('link[rel=system]'),\n        nbSubsystem = $db.SyrupSystem.find({\n            'subsystem': true\n        }); \n        if (sys) {\n            sys.main();\n        } \n        if (systems.length + 1 + nbSubsystem.length === $db.SyrupSystem.count()) {\n            $component.get('syrup').ready();\n        }\n    };\n    \n    if (async) {\n        xhr.open('GET', url, true);\n        xhr.onreadystatechange = function () {\n            if (xhr.readyState === 4) {\n                if (xhr.status === 200) {\n                    callbackLoad(JSON.parse(xhr.response));\n                }\n            }\n        };\n        xhr.send(null);\n    } else {\n        xhr.open('GET', url, false);\n        xhr.send(null);\n        if (xhr.status === 200) {\n            callbackLoad(JSON.parse(xhr.response));\n        }\n    }\n}",
			"core": true,
			"useCoreAPI": true
		},
		"1f6001773a18791": {
			"_id": "1f6001773a18791",
			"component": "e89c617b6b15d24",
			"state": "main",
			"action": "function main() {\n    var subsystems = [],\n    systems = [],\n    system = null,\n    i = 0,\n    length = 0;\n    \n    subsystems = $db.SyrupSystem.find({\n        'subsystem': true\n    });\n    subsystems.forEach(function (subsystem) {\n        var subsystemId = subsystem._id;\n        this.require(subsystemId).main();\n    }, this); \n    \n    if (typeof document !== 'undefined') {\n        systems = document.querySelectorAll('link[rel=system]');\n        length = systems.length;\n        \n        for (i = 0; i < length; i++) {\n            system = systems[i];\n            \n            if (system.getAttribute('async') === 'false') {\n                this.require('syrup').load(system.href, false);\n            } else {\n                this.require('syrup').load(system.href, true);\n            }\n        }\n        if (length === 0) {\n            this.require('syrup').ready();\n        }\n    }\n}",
			"core": true,
			"useCoreAPI": true
		},
		"1152e1ca841228b": {
			"_id": "1152e1ca841228b",
			"component": "Syrup",
			"state": "error",
			"action": "function error(data) {\n    console.error('syrup: ' + data.message, data.error);\n}",
			"core": true
		},
		"1117116e0f1693e": {
			"_id": "1117116e0f1693e",
			"component": "Syrup",
			"state": "system",
			"action": "function system(name) {\n    var System = null,\n    system = {},\n    systemId = '',\n    result = [],\n    conf = {};\n    \n    if (name) {\n        conf.master = true;\n        conf.name = name;\n        System = this.require('SyrupSystem');\n        system = new System(conf);\n    } else {\n        result = $db.SyrupSystem.find({\n            'master': true\n        });\n        if (result.length) {\n            systemId = result[0]._id;\n            system = $component.get(systemId);\n        }\n    }\n    return system;\n}",
			"core": true,
			"useCoreAPI": true
		},
		"14aeb18fee100e0": {
			"_id": "14aeb18fee100e0",
			"component": "Syrup",
			"state": "warning",
			"action": "function warning(message) {\n    console.warn('syrup: ' + message);\n}",
			"core": true
		},
		"1c7d91357b1d3d5": {
			"_id": "1c7d91357b1d3d5",
			"component": "SyrupClassInfo",
			"state": "collection",
			"action": "function collection(name) {\n    var result = {};\n    if (this.metamodel()[name] === 'collection') {\n        result = this.model()[name];\n    } \n    \n    return result; \n}",
			"core": true
		},
		"1523c1f80f1c711": {
			"_id": "1523c1f80f1c711",
			"component": "SyrupClassInfo",
			"state": "collections",
			"action": "function collections() {\n    var keys = Object.keys(this.metamodel()),\n    item = '',\n    result = [],\n    i = 0,\n    length = 0;\n    \n    length = keys.length; \n    \n    for (i = 0; i < length; i++) { \n        item = keys[i]; \n        if (this.metamodel()[item] === 'collection') {\n            result.push(item);\n        }\n    }\n    \n    return result;\n}",
			"core": true
		},
		"1738c124ec18532": {
			"_id": "1738c124ec18532",
			"component": "SyrupClassInfo",
			"state": "event",
			"action": "function event(name) {\n    var result = {};\n    \n    if (this.metamodel()[name] === 'event') {\n        result = this.model()[name];\n    } \n    \n    return result;\n}",
			"core": true
		},
		"1f1a41d11c1c482": {
			"_id": "1f1a41d11c1c482",
			"component": "SyrupClassInfo",
			"state": "events",
			"action": "function events() {\n    var keys = Object.keys(this.metamodel()),\n    item = '',\n    result = [],\n    i = 0,\n    length = 0;\n    \n    length = keys.length;\n    \n    for (i = 0; i < length; i++) {\n        item = keys[i];\n        if (this.metamodel()[item] === 'event') {\n            result.push(item);\n        }\n    } \n    return result;\n}",
			"core": true
		},
		"135631389a17cdc": {
			"_id": "135631389a17cdc",
			"component": "SyrupClassInfo",
			"state": "method",
			"action": "function method(name) {\n    var result = {};\n    if (this.metamodel()[name] === 'method') {\n        result = this.model()[name];\n        \n    }\n    \n    return result;\n}",
			"core": true
		},
		"1de1a1ad8512a40": {
			"_id": "1de1a1ad8512a40",
			"component": "SyrupClassInfo",
			"state": "methods",
			"action": "function methods() {\n    var keys = Object.keys(this.metamodel()),\n    item = '',\n    result = [],\n    i = 0,\n    length = 0;\n    length = keys.length;\n    for (i = 0; i < length; i++) {\n        item = keys[i];\n        if (this.metamodel()[item] === 'method') {\n            result.push(item);\n        }\n    } \n    \n    return result;\n}",
			"core": true
		},
		"1d73d135d519abd": {
			"_id": "1d73d135d519abd",
			"component": "SyrupClassInfo",
			"state": "properties",
			"action": "function properties() { \n    var keys = Object.keys(this.metamodel()),\n    item = '',\n    result = [],\n    i = 0,\n    length = 0;\n    length = keys.length;\n    \n    for (i = 0; i < length; i++) {\n        item = keys[i];\n        if (this.metamodel()[item] === 'property') {\n            result.push(item);\n        }\n    } return result;\n}",
			"core": true
		},
		"13a05176b816306": {
			"_id": "13a05176b816306",
			"component": "SyrupClassInfo",
			"state": "property",
			"action": "function property(name) {\n    var result = {};\n    \n    if (this.metamodel()[name] === 'property') {\n        result = this.model()[name];\n    }\n    return result;\n}",
			"core": true
		},
		"1513d1b17410e31": {
			"_id": "1513d1b17410e31",
			"component": "SyrupComponent",
			"state": "destroy",
			"action": "function destroy() {\n    $component.destroy(this.id());\n}",
			"core": true,
			"useCoreAPI": true
		},
		"1afe01d6271df24": {
			"_id": "1afe01d6271df24",
			"component": "SyrupComponent",
			"state": "off",
			"action": "function off(state, behaviorId) {\n    var args = [],\n    i = 0,\n    length = 0;\n    length = arguments.length;\n    \n    for (i = 0; i < length - 6; i++) {\n        args.push(arguments[i]);\n    }\n    \n    if ($workflow.checkParams({\"component\": this, \"methodName\": \"off\", \"args\": args})) {\n        if ($metamodel.isValidState(state, this.constructor.name)) {\n            $behavior.remove({\"behaviorId\": behaviorId, \"componentId\": this.id(), \"state\": state});\n        } else { $helper.getSyrup().warning({ \"message\":\"invoke 'off' method of component '\" + this.id() + \"' with an invalid state '\" + state + \"'\"}); \n        }\n    }\n}",
			"core": true,
			"useCoreAPI": true
		},
		"1f46210b7f1edce": {
			"_id": "1f46210b7f1edce",
			"component": "SyrupComponent",
			"state": "require",
			"action": "function require(id) {\n    return $component.get(id);\n}",
			"core": true,
			"useCoreAPI": true
		},
		"185ad1ffc211622": {
			"_id": "185ad1ffc211622",
			"component": "SyrupDatabase",
			"state": "collections",
			"action": "function collections() {\n    var result = {},\n    collectionName = '';\n    \n    for (collectionName in $db.store) {\n        if ($db.store.hasOwnProperty(collectionName) && collectionName.indexOf('Syrup') !== 0) {\n            result[collectionName] = $db[collectionName];\n            \n        }\n    }\n    return result;\n}",
			"core": true,
			"useCoreAPI": true
		},
		"114f911f1511ecb": {
			"_id": "114f911f1511ecb",
			"component": "SyrupDatabase",
			"state": "subsystem",
			"action": "function subsystem(params) {\n    return $db.subsystem(params);\n}",
			"core": true,
			"useCoreAPI": true
		},
		"1c5c716dfa1d3d5": {
			"_id": "1c5c716dfa1d3d5",
			"component": "SyrupDatabase",
			"state": "system",
			"action": "function system(system) {\n    return $db.system(system);\n}",
			"core": true,
			"useCoreAPI": true
		},
		"161c71a7c912944": {
			"_id": "161c71a7c912944",
			"component": "SyrupMetamodel",
			"state": "create",
			"action": "function create() {\n    $metamodel.create();\n}",
			"core": true,
			"useCoreAPI": true
		},
		"18161129081f508": {
			"_id": "18161129081f508",
			"component": "SyrupMetamodel",
			"state": "schema",
			"action": "function schema(schema) {\n    $metamodel.schema(schema);\n}",
			"core": true,
			"useCoreAPI": true
		},
		"184b91e0e71f1c5": {
			"_id": "184b91e0e71f1c5",
			"component": "SyrupMetamodel",
			"state": "type",
			"action": "function type(type) {\n    $metamodel.type(type);\n}",
			"core": true,
			"useCoreAPI": true
		},
		"1fe851fda917aa3": {
			"_id": "1fe851fda917aa3",
			"component": "SyrupSystem",
			"state": "sync",
			"action": "function sync() {\n    var system = JSON.parse($db.system());\n    \n    this.schemas(system.schemas);\n    this.types(system.types);\n    this.behaviors(system.behaviors);\n    this.components(system.components);\n}",
			"core": true,
			"useCoreAPI": true
		}
	},
	"components": {
		"Syrup": {
			"syrup": {
				"_id": "syrup",
				"version": "0.9.5"
			}
		},
		"SyrupDatabase": {
			"db": {
				"_id": "db"
			}
		},
		"SyrupMetamodel": {
			"metamodel": {
				"_id": "metamodel"
			}
		},
		"SyrupSystem": {
			"133421d0c313d2d": {
				"_id": "133421d0c313d2d",
				"name": "web",
				"version": "0.1.0",
				"description": "Add behaviors for web",
				"subsystem": true,
				"master": false
			},
			"1f6ff194df1c37a": {
				"_id": "1f6ff194df1c37a",
				"name": "webType",
				"version": "0.1.0",
				"description": "Add types for web",
				"subsystem": true,
				"master": false
			}
		}
	}
}