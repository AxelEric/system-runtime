{
	"name": "monoco",
	"version": "0.7.7",
	"description": "Design.Create.Compose",
	"_id": "e89c617b6b15d24",
	"schemas": {
		"MonocoSchema": {
			"load": "method",
			"ready": "event",
			"_id": "MonocoSchema",
			"_name": "MonocoSchema",
			"_inherit": [
				"MonocoComponentSchema"
			],
			"_core": true,
			"version": "property",
			"system": "method",
			"warning": "event"
		},
		"Monoco": {
			"load": {
				"params": [
					{
						"name": "url",
						"type": "string"
					},
					{
						"name": "async",
						"type": "boolean",
						"mandatory": false,
						"default": true
					}
				]
			},
			"ready": {},
			"_id": "Monoco",
			"_name": "Monoco",
			"_schema": "MonocoSchema",
			"_inherit": [
				"MonocoComponent"
			],
			"_core": true,
			"version": {
				"type": "string",
				"readOnly": true,
				"mandatory": true,
				"default": "0.0.0"
			},
			"warning": {
				"params": [
					{
						"name": "message",
						"type": "string"
					}
				]
			},
			"system": {
				"params": [
					{
						"name": "name",
						"type": "string",
						"mandatory": false
					}
				],
				"result": "object"
			}
		},
		"MonocoBehavior": {
			"_id": "MonocoBehavior",
			"_name": "MonocoBehavior",
			"_schema": "MonocoBehaviorSchema",
			"_inherit": [
				"MonocoComponent"
			],
			"_core": true,
			"core": {
				"type": "boolean",
				"readOnly": false,
				"mandatory": false,
				"default": false
			},
			"useCoreAPI": {
				"type": "boolean",
				"readOnly": false,
				"mandatory": false,
				"default": false
			},
			"component": {
				"type": "string",
				"readOnly": false,
				"mandatory": true,
				"default": ""
			},
			"action": {
				"type": "javascript",
				"readOnly": false,
				"mandatory": true,
				"default": ""
			},
			"state": {
				"type": "string",
				"readOnly": false,
				"mandatory": true,
				"default": ""
			}
		},
		"MonocoBehaviorSchema": {
			"_id": "MonocoBehaviorSchema",
			"_name": "MonocoBehaviorSchema",
			"_inherit": [
				"MonocoComponentSchema"
			],
			"_core": true,
			"core": "property",
			"component": "property",
			"action": "property",
			"state": "property",
			"useCoreAPI": "property"
		},
		"MonocoChannel": {
			"_id": "MonocoChannel",
			"_name": "MonocoChannel",
			"_schema": "MonocoChannelSchema",
			"_inherit": [
				"MonocoComponent",
				"MonocoChannelEvent"
			],
			"_core": true,
			"send": {
				"params": [
					{
						"name": "message",
						"type": "object"
					}
				]
			}
		},
		"MonocoChannelEvent": {
			"_id": "MonocoChannelEvent",
			"_name": "MonocoChannelEvent",
			"_schema": "MonocoChannelEventSchema"
		},
		"MonocoChannelEventSchema": {
			"_id": "MonocoChannelEventSchema",
			"_name": "MonocoChannelEventSchema"
		},
		"MonocoChannelSchema": {
			"_id": "MonocoChannelSchema",
			"_name": "MonocoChannelSchema",
			"_inherit": [
				"MonocoComponentSchema",
				"MonocoChannelEventSchema"
			],
			"_core": true,
			"send": "event"
		},
		"MonocoClassInfo": {
			"_id": "MonocoClassInfo",
			"_name": "MonocoClassInfo",
			"_schema": "MonocoClassInfoSchema",
			"_inherit": [
				"MonocoComponent"
			],
			"_core": true,
			"metamodel": {
				"type": "object",
				"readOnly": true,
				"mandatory": true,
				"default": {}
			},
			"model": {
				"type": "object",
				"readOnly": true,
				"mandatory": true,
				"default": {}
			},
			"property": {
				"params": [
					{
						"name": "name",
						"type": "string"
					}
				],
				"result": "object"
			},
			"properties": {
				"result": "array"
			},
			"method": {
				"params": [
					{
						"name": "name",
						"type": "string"
					}
				],
				"result": "object"
			},
			"methods": {
				"result": "array"
			},
			"collection": {
				"params": [
					{
						"name": "name",
						"type": "string"
					}
				],
				"result": "object"
			},
			"collections": {
				"result": "array"
			},
			"event": {
				"params": [
					{
						"name": "name",
						"type": "string"
					}
				],
				"result": "object"
			},
			"events": {
				"result": "array"
			}
		},
		"MonocoClassInfoSchema": {
			"_id": "MonocoClassInfoSchema",
			"_name": "MonocoClassInfoSchema",
			"_inherit": [
				"MonocoComponentSchema"
			],
			"_core": true,
			"model": "property",
			"metamodel": "property",
			"method": "method",
			"methods": "method",
			"property": "method",
			"properties": "method",
			"collections": "method",
			"collection": "method",
			"event": "method",
			"events": "method"
		},
		"MonocoComponent": {
			"_id": "MonocoComponent",
			"_name": "MonocoComponent",
			"_schema": "MonocoComponentSchema",
			"_core": true,
			"on": {
				"params": [
					{
						"name": "state",
						"type": "string"
					},
					{
						"name": "handler",
						"type": "function"
					},
					{
						"name": "useCoreAPI",
						"type": "boolean",
						"mandatory": false
					}
				]
			},
			"off": {
				"params": [
					{
						"name": "state",
						"type": "string"
					},
					{
						"name": "behaviorId",
						"type": "string",
						"mandatory": false
					}
				]
			},
			"require": {
				"params": [
					{
						"name": "id",
						"type": "string"
					}
				]
			},
			"destroy": {
				"params": []
			},
			"classInfo": {
				"type": "@MonocoClassInfo",
				"readOnly": false,
				"mandatory": false,
				"default": {}
			},
			"init": {
				"params": [
					{
						"name": "conf",
						"type": "object"
					}
				]
			},
			"error": {
				"params": [
					{
						"name": "data",
						"type": "errorParam"
					}
				]
			}
		},
		"MonocoComponentSchema": {
			"_id": "MonocoComponentSchema",
			"_name": "MonocoComponentSchema",
			"_core": true,
			"classInfo": "property",
			"on": "method",
			"off": "method",
			"require": "method",
			"destroy": "method",
			"init": "method",
			"error": "event"
		},
		"MonocoDatabase": {
			"_id": "MonocoDatabase",
			"_name": "MonocoDatabase",
			"_schema": "MonocoDatabaseSchema",
			"_inherit": [
				"MonocoComponent"
			],
			"_core": true,
			"system": {
				"params": [
					{
						"name": "system",
						"type": "object",
						"mandatory": false
					}
				],
				"result": "string"
			},
			"subsystem": {
				"params": [
					{
						"name": "params",
						"type": "object"
					}
				],
				"result": "string"
			},
			"collections": {
				"result": "object"
			},
			"insert": {
				"params": [
					{
						"name": "classId",
						"type": "string"
					},
					{
						"name": "object",
						"type": "object"
					}
				]
			},
			"update": {
				"params": [
					{
						"name": "schema",
						"type": "string"
					},
					{
						"name": "componentId",
						"type": "string"
					},
					{
						"name": "attributeName",
						"type": "string"
					},
					{
						"name": "attributeValue",
						"type": "object"
					}
				]
			},
			"remove": {
				"params": [
					{
						"name": "classId",
						"type": "string"
					},
					{
						"name": "object",
						"type": "string"
					}
				]
			}
		},
		"MonocoDatabaseSchema": {
			"_id": "MonocoDatabaseSchema",
			"_name": "MonocoDatabaseSchema",
			"_inherit": [
				"MonocoComponentSchema"
			],
			"_core": true,
			"system": "method",
			"subsystem": "method",
			"collections": "method",
			"insert": "event",
			"update": "event",
			"remove": "event"
		},
		"MonocoMessage": {
			"_id": "MonocoMessage",
			"_name": "MonocoMessage",
			"_schema": "MonocoMessageSchema",
			"_core": true,
			"event": {
				"type": "string",
				"readOnly": false,
				"mandatory": true,
				"default": ""
			},
			"from": {
				"type": "string",
				"readOnly": false,
				"mandatory": true,
				"default": ""
			},
			"data": {
				"type": "array",
				"readOnly": false,
				"mandatory": true,
				"default": []
			}
		},
		"MonocoMessageSchema": {
			"_id": "MonocoMessageSchema",
			"_name": "MonocoMessageSchema",
			"_core": true,
			"event": "property",
			"from": "property",
			"data": "property"
		},
		"MonocoMetamodel": {
			"_id": "MonocoMetamodel",
			"_name": "MonocoMetamodel",
			"_schema": "MonocoMetamodelSchema",
			"_inherit": [
				"MonocoComponent"
			],
			"_core": true,
			"schema": {
				"params": [
					{
						"name": "schema",
						"type": "object"
					}
				]
			},
			"type": {
				"params": [
					{
						"name": "type",
						"type": "object"
					}
				]
			},
			"create": {
				"params": []
			}
		},
		"MonocoMetamodelSchema": {
			"_id": "MonocoMetamodelSchema",
			"_name": "MonocoMetamodelSchema",
			"_inherit": [
				"MonocoComponentSchema"
			],
			"_core": true,
			"schema": "method",
			"type": "method",
			"create": "method"
		},
		"MonocoState": {
			"_id": "MonocoState",
			"_name": "MonocoState",
			"_schema": "MonocoStateSchema",
			"_class": false,
			"_core": true,
			"name": {
				"type": "string",
				"readOnly": false,
				"mandatory": true,
				"default": ""
			},
			"parameters": {
				"type": "object",
				"readOnly": false,
				"mandatory": false,
				"default": {}
			}
		},
		"MonocoStateSchema": {
			"_id": "MonocoStateSchema",
			"_name": "MonocoStateSchema",
			"_core": true,
			"name": "property",
			"parameters": "property"
		},
		"MonocoSystem": {
			"_id": "MonocoSystem",
			"_name": "MonocoSystem",
			"_schema": "MonocoSystemSchema",
			"_inherit": [
				"MonocoComponent"
			],
			"_core": true,
			"name": {
				"type": "string",
				"readOnly": false,
				"mandatory": true,
				"default": ""
			},
			"master": {
				"type": "boolean",
				"readOnly": false,
				"mandatory": false,
				"default": false
			},
			"subsystem": {
				"type": "boolean",
				"readOnly": false,
				"mandatory": false,
				"default": false
			},
			"version": {
				"type": "string",
				"readOnly": false,
				"mandatory": false,
				"default": "0.0.1"
			},
			"description": {
				"type": "string",
				"readOnly": false,
				"mandatory": false,
				"default": ""
			},
			"schemas": {
				"type": "object",
				"readOnly": false,
				"mandatory": false,
				"default": {}
			},
			"behaviors": {
				"type": "object",
				"readOnly": false,
				"mandatory": false,
				"default": {}
			},
			"types": {
				"type": "object",
				"readOnly": false,
				"mandatory": false,
				"default": {}
			},
			"components": {
				"type": "object",
				"readOnly": false,
				"mandatory": false,
				"default": {}
			},
			"ready": {},
			"sync": {},
			"main": {}
		},
		"MonocoSystemSchema": {
			"_id": "MonocoSystemSchema",
			"_name": "MonocoSystemSchema",
			"_inherit": [
				"MonocoComponentSchema"
			],
			"_core": true,
			"name": "property",
			"master": "property",
			"subsystem": "property",
			"version": "property",
			"description": "property",
			"schemas": "property",
			"behaviors": "property",
			"types": "property",
			"components": "property",
			"sync": "method",
			"main": "method",
			"ready": "event"
		}
	},
	"types": {
		"html": {
			"name": "html",
			"type": "string",
			"core": true
		},
		"css": {
			"name": "css",
			"type": "string",
			"core": true
		},
		"collection": {
			"name": "collection",
			"type": "object",
			"schema": {
				"type": {
					"type": [
						"string"
					],
					"mandatory": true
				},
				"readOnly": {
					"type": "boolean",
					"mandatory": true
				},
				"mandatory": {
					"type": "boolean",
					"mandatory": true
				},
				"default": {
					"type": "object",
					"mandatory": true
				}
			},
			"core": true
		},
		"errorParam": {
			"name": "errorParam",
			"type": "object",
			"schema": {
				"message": {
					"type": "string",
					"mandatory": true
				},
				"error": {
					"type": "object",
					"mandatory": true
				}
			},
			"core": true
		},
		"event": {
			"name": "event",
			"type": "object",
			"schema": {
				"params": {
					"type": [
						"parameter"
					],
					"mandatory": false
				}
			},
			"core": true
		},
		"javascript": {
			"name": "javascript",
			"type": "string",
			"core": true
		},
		"message": {
			"name": "message",
			"type": "object",
			"schema": {
				"event": {
					"type": "string",
					"mandatory": true
				},
				"from": {
					"type": "string",
					"mandatory": false
				},
				"data": {
					"type": "object",
					"mandatory": true
				}
			},
			"core": true
		},
		"method": {
			"name": "method",
			"type": "object",
			"schema": {
				"result": {
					"type": "string",
					"mandatory": false
				},
				"params": {
					"type": [
						"parameter"
					],
					"mandatory": false
				}
			},
			"core": true
		},
		"parameter": {
			"name": "parameter",
			"type": "object",
			"schema": {
				"name": {
					"type": "string",
					"mandatory": true
				},
				"type": {
					"type": "string",
					"mandatory": true
				},
				"mandatory": {
					"type": "boolean",
					"mandatory": false
				},
				"default": {
					"type": "@type",
					"mandatory": false
				}
			},
			"core": true
		},
		"property": {
			"name": "property",
			"type": "object",
			"schema": {
				"type": {
					"type": "string",
					"mandatory": true
				},
				"readOnly": {
					"type": "boolean",
					"mandatory": true
				},
				"mandatory": {
					"type": "boolean",
					"mandatory": true
				},
				"default": {
					"type": "@type",
					"mandatory": true
				}
			},
			"core": true
		}
	},
	"behaviors": {
		"1aaee1e6311ff39": {
			"_id": "1aaee1e6311ff39",
			"component": "monoco",
			"state": "load",
			"action": "function load(url, async) { var xhr = null, callbackLoad = null; xhr = new XMLHttpRequest(); callbackLoad = function callbackLoad(system) { var sysId = $db.system(system), sys = $component.get(sysId), systems = document.querySelectorAll('link[rel=system]'), nbSubsystem = $db.MonocoSystem.find({ 'subsystem': true }); if (sys) { sys.main(); } if (systems.length + 1 + nbSubsystem.length === $db.MonocoSystem.count()) { $component.get('monoco').ready(); } }; if (async) { xhr.open('GET', url, true); xhr.onreadystatechange = function () { if (xhr.readyState === 4) { if (xhr.status === 200) { callbackLoad(JSON.parse(xhr.response)); } } }; xhr.send(null); } else { xhr.open('GET', url, false); xhr.send(null); if (xhr.status === 200) { callbackLoad(JSON.parse(xhr.response)); } }}",
			"core": true,
			"useCoreAPI": true
		},
		"1f6001773a18791": {
			"_id": "1f6001773a18791",
			"component": "e89c617b6b15d24",
			"state": "main",
			"action": "function main() { var subsystems = [], systems = [], system = null, i = 0, length = 0; subsystems = $db.MonocoSystem.find({ 'subsystem': true }); subsystems.forEach(function (subsystem) { var subsystemId = subsystem._id; this.require(subsystemId).main(); }, this); if (typeof document !== 'undefined') { systems = document.querySelectorAll('link[rel=system]'); length = systems.length; for (i = 0; i < length; i++) { system = systems[i]; if (system.getAttribute('async') === 'false') { this.require('monoco').load(system.href, false); } else { this.require('monoco').load(system.href, true); } } if (length === 0) { this.require('monoco').ready(); } }}",
			"core": true,
			"useCoreAPI": true
		},
		"197751e3551e06f": {
			"_id": "197751e3551e06f",
			"component": "Monoco",
			"state": "error",
			"action": "function error(data) { console.error('monoco: ' + data.message, data.error); }",
			"core": true
		},
		"112711926518069": {
			"_id": "112711926518069",
			"component": "Monoco",
			"state": "system",
			"action": "function system(name) {    var System = null,        system = {},        systemId = '',        result = [],        conf = {};    if (name) {        conf.master = true;        conf.name = name;        System = this.require('MonocoSystem');        system = new System(conf);    } else {        result = $db.MonocoSystem.find({            'master': true        });        if (result.length) {            systemId = result[0]._id;            system = $component.get(systemId);        }    }    return system;}",
			"core": true,
			"useCoreAPI": true
		},
		"1ef9a1a3271e595": {
			"_id": "1ef9a1a3271e595",
			"component": "Monoco",
			"state": "warning",
			"action": "function warning(message) { console.warn('monoco: ' + message); }",
			"core": true
		},
		"17df2116b51f0b3": {
			"_id": "17df2116b51f0b3",
			"component": "MonocoClassInfo",
			"state": "collection",
			"action": "function collection(name) { var result = {}; if (this.metamodel()[name] === 'collection') { result = this.model()[name]; } return result; }",
			"core": true
		},
		"1df271a1e318a3b": {
			"_id": "1df271a1e318a3b",
			"component": "MonocoClassInfo",
			"state": "collections",
			"action": "function collections() { var keys = Object.keys(this.metamodel()), item = '', result = [], i = 0, length = 0; length = keys.length; for (i = 0; i < length; i++) { item = keys[i]; if (this.metamodel()[item] === 'collection') { result.push(item); } } return result; }",
			"core": true
		},
		"1ea7e1f248106a9": {
			"_id": "1ea7e1f248106a9",
			"component": "MonocoClassInfo",
			"state": "event",
			"action": "function event(name) { var result = {}; if (this.metamodel()[name] === 'event') { result = this.model()[name]; } return result; }",
			"core": true
		},
		"1a8971c412177d3": {
			"_id": "1a8971c412177d3",
			"component": "MonocoClassInfo",
			"state": "events",
			"action": "function events() { var keys = Object.keys(this.metamodel()), item = '', result = [], i = 0, length = 0; length = keys.length; for (i = 0; i < length; i++) { item = keys[i]; if (this.metamodel()[item] === 'event') { result.push(item); } } return result; }",
			"core": true
		},
		"1229e111471468e": {
			"_id": "1229e111471468e",
			"component": "MonocoClassInfo",
			"state": "method",
			"action": "function method(name) { var result = {}; if (this.metamodel()[name] === 'method') { result = this.model()[name]; } return result; }",
			"core": true
		},
		"1229f14aeb199b2": {
			"_id": "1229f14aeb199b2",
			"component": "MonocoClassInfo",
			"state": "methods",
			"action": "function methods() { var keys = Object.keys(this.metamodel()), item = '', result = [], i = 0, length = 0; length = keys.length; for (i = 0; i < length; i++) { item = keys[i]; if (this.metamodel()[item] === 'method') { result.push(item); } } return result; }",
			"core": true
		},
		"1af5512d0f16c92": {
			"_id": "1af5512d0f16c92",
			"component": "MonocoClassInfo",
			"state": "properties",
			"action": "function properties() { var keys = Object.keys(this.metamodel()), item = '', result = [], i = 0, length = 0; length = keys.length; for (i = 0; i < length; i++) { item = keys[i]; if (this.metamodel()[item] === 'property') { result.push(item); } } return result; }",
			"core": true
		},
		"1ade21aee718702": {
			"_id": "1ade21aee718702",
			"component": "MonocoClassInfo",
			"state": "property",
			"action": "function property(name) { var result = {}; if (this.metamodel()[name] === 'property') { result = this.model()[name]; } return result; }",
			"core": true
		},
		"1e6861a86a17670": {
			"_id": "1e6861a86a17670",
			"component": "MonocoComponent",
			"state": "destroy",
			"action": "function destroy() { $component.destroy(this.id()); }",
			"core": true,
			"useCoreAPI": true
		},
		"11f651094b15b2c": {
			"_id": "11f651094b15b2c",
			"component": "MonocoComponent",
			"state": "off",
			"action": "function off(state, behaviorId) { var args = [], i = 0, length = 0; length = arguments.length; for (i = 0; i < length - 7; i++) { args.push(arguments[i]); } if ($workflow.checkParams({\"component\": this, \"methodName\": \"off\", \"args\": args})) { if ($metamodel.isValidState(state, this.constructor.name)) {$behavior.remove({\"behaviorId\": behaviorId, \"componentId\": this.id(), \"state\": state}); } else { $helper.getMonoco().warning({ \"message\":\"invoke 'off' method of component '\" + this.id() + \"' with an invalid state '\" + state + \"'\"}); } } }",
			"core": true,
			"useCoreAPI": true
		},
		"1c243149ce14f38": {
			"_id": "1c243149ce14f38",
			"component": "MonocoComponent",
			"state": "require",
			"action": "function require(id) { return $component.get(id); }",
			"core": true,
			"useCoreAPI": true
		},
		"1a0cc197621b6f7": {
			"_id": "1a0cc197621b6f7",
			"component": "MonocoDatabase",
			"state": "collections",
			"action": "function collections() { var result = {}, collectionName = ''; for (collectionName in $db.store) { if ($db.store.hasOwnProperty(collectionName) && collectionName.indexOf('Monoco') !== 0) { result[collectionName] = $db[collectionName]; } } return result;}",
			"core": true,
			"useCoreAPI": true
		},
		"1fecc1524f15ffa": {
			"_id": "1fecc1524f15ffa",
			"component": "MonocoDatabase",
			"state": "subsystem",
			"action": "function subsystem(params) { return $db.subsystem(params); }",
			"core": true,
			"useCoreAPI": true
		},
		"1caad1e14f18071": {
			"_id": "1caad1e14f18071",
			"component": "MonocoDatabase",
			"state": "system",
			"action": "function system(system) { return $db.system(system); }",
			"core": true,
			"useCoreAPI": true
		},
		"140a31d693124b8": {
			"_id": "140a31d693124b8",
			"component": "MonocoMetamodel",
			"state": "create",
			"action": "function create() { $metamodel.create(); }",
			"core": true,
			"useCoreAPI": true
		},
		"12d8c120491875c": {
			"_id": "12d8c120491875c",
			"component": "MonocoMetamodel",
			"state": "schema",
			"action": "function schema(schema) { $metamodel.schema(schema); }",
			"core": true,
			"useCoreAPI": true
		},
		"1d6dc193191e761": {
			"_id": "1d6dc193191e761",
			"component": "MonocoMetamodel",
			"state": "type",
			"action": "function type(type) { $metamodel.type(type); }",
			"core": true,
			"useCoreAPI": true
		},
		"1bbc41c1c71d1c1": {
			"_id": "1bbc41c1c71d1c1",
			"component": "MonocoSystem",
			"state": "sync",
			"action": "function sync() { var system = JSON.parse($db.system()); this.schemas(system.schemas); this.types(system.types); this.behaviors(system.behaviors); this.components(system.components); }",
			"core": true,
			"useCoreAPI": true
		}
	},
	"components": {
		"Monoco": {
			"monoco": {
				"_id": "monoco",
				"version": "0.7.7"
			}
		},
		"MonocoDatabase": {
			"db": {
				"_id": "db"
			}
		},
		"MonocoMetamodel": {
			"metamodel": {
				"_id": "metamodel"
			}
		},
		"MonocoSystem": {
			"133421d0c313d2d": {
				"_id": "133421d0c313d2d",
				"name": "web",
				"version": "0.1.0",
				"description": "Add behaviors for web",
				"subsystem": true,
				"master": false
			},
			"1f6ff194df1c37a": {
				"_id": "1f6ff194df1c37a",
				"name": "webType",
				"version": "0.1.0",
				"description": "Add types for web",
				"subsystem": true,
				"master": false
			}
		}
	}
}