{
	"name": "monoco",
	"version": "0.5.5",
	"description": "A Model and a NoSQL Database for Components",
	"_id": "e89c617b6b15d24",
	"schemas": {
		"MonocoSchema": {
			"systemLoaded": "event",
			"_id": "MonocoSchema",
			"_name": "MonocoSchema",
			"_inherit": [
				"MonocoComponentSchema"
			],
			"_core": true,
			"version": "property",
			"find": "method",
			"load": "method",
			"system": "method",
			"warning": "event",
			"ready": "event"
		},
		"Monoco": {
			"systemLoaded": {},
			"_id": "Monoco",
			"_name": "Monoco",
			"_schema": "MonocoSchema",
			"_inherit": [
				"MonocoComponent"
			],
			"_core": true,
			"version": {
				"type": "string",
				"readOnly": true,
				"mandatory": true,
				"default": "0.0.0"
			},
			"find": {
				"params": [
					{
						"name": "Class",
						"type": "string"
					},
					{
						"name": "query",
						"type": "object",
						"mandatory": false,
						"default": {}
					}
				],
				"result": "array"
			},
			"load": {
				"params": [
					{
						"name": "url",
						"type": "string"
					},
					{
						"name": "async",
						"type": "boolean",
						"mandatory": false,
						"default": true
					}
				]
			},
			"warning": {
				"params": [
					{
						"name": "message",
						"type": "string"
					}
				]
			},
			"system": {
				"params": [
					{
						"name": "name",
						"type": "string",
						"mandatory": false
					}
				],
				"result": "object"
			},
			"ready": {}
		},
		"MonocoBehavior": {
			"_id": "MonocoBehavior",
			"_name": "MonocoBehavior",
			"_schema": "MonocoBehaviorSchema",
			"_inherit": [
				"MonocoComponent"
			],
			"_core": true,
			"core": {
				"type": "boolean",
				"readOnly": false,
				"mandatory": false,
				"default": false
			},
			"useCoreAPI": {
				"type": "boolean",
				"readOnly": false,
				"mandatory": false,
				"default": false
			},
			"component": {
				"type": "string",
				"readOnly": false,
				"mandatory": true,
				"default": ""
			},
			"action": {
				"type": "javascript",
				"readOnly": false,
				"mandatory": true,
				"default": ""
			},
			"state": {
				"type": "string",
				"readOnly": false,
				"mandatory": true,
				"default": ""
			}
		},
		"MonocoBehaviorSchema": {
			"_id": "MonocoBehaviorSchema",
			"_name": "MonocoBehaviorSchema",
			"_inherit": [
				"MonocoComponentSchema"
			],
			"_core": true,
			"core": "property",
			"component": "property",
			"action": "property",
			"state": "property",
			"useCoreAPI": "property"
		},
		"MonocoChannel": {
			"_id": "MonocoChannel",
			"_name": "MonocoChannel",
			"_schema": "MonocoChannelSchema",
			"_inherit": [
				"MonocoComponent"
			],
			"_core": true,
			"listen": {
				"params": [
					{
						"name": "event",
						"type": "string"
					},
					{
						"name": "callback",
						"type": "function"
					}
				]
			},
			"send": {
				"params": [
					{
						"name": "message",
						"type": "message"
					}
				],
				"result": "boolean"
			}
		},
		"MonocoChannelSchema": {
			"_id": "MonocoChannelSchema",
			"_name": "MonocoChannelSchema",
			"_inherit": [
				"MonocoComponentSchema"
			],
			"_core": true,
			"listen": "method",
			"send": "method"
		},
		"MonocoClassInfo": {
			"_id": "MonocoClassInfo",
			"_name": "MonocoClassInfo",
			"_schema": "MonocoClassInfoSchema",
			"_inherit": [
				"MonocoComponent"
			],
			"_core": true,
			"metamodel": {
				"type": "object",
				"readOnly": true,
				"mandatory": true,
				"default": {}
			},
			"model": {
				"type": "object",
				"readOnly": true,
				"mandatory": true,
				"default": {}
			},
			"property": {
				"params": [
					{
						"name": "name",
						"type": "string"
					}
				],
				"result": "object"
			},
			"properties": {
				"result": "array"
			},
			"method": {
				"params": [
					{
						"name": "name",
						"type": "string"
					}
				],
				"result": "object"
			},
			"methods": {
				"result": "array"
			},
			"collection": {
				"params": [
					{
						"name": "name",
						"type": "string"
					}
				],
				"result": "object"
			},
			"collections": {
				"result": "array"
			},
			"event": {
				"params": [
					{
						"name": "name",
						"type": "string"
					}
				],
				"result": "object"
			},
			"events": {
				"result": "array"
			}
		},
		"MonocoClassInfoSchema": {
			"_id": "MonocoClassInfoSchema",
			"_name": "MonocoClassInfoSchema",
			"_inherit": [
				"MonocoComponentSchema"
			],
			"_core": true,
			"model": "property",
			"metamodel": "property",
			"method": "method",
			"methods": "method",
			"property": "method",
			"properties": "method",
			"collections": "method",
			"collection": "method",
			"event": "method",
			"events": "method"
		},
		"MonocoComponent": {
			"_id": "MonocoComponent",
			"_name": "MonocoComponent",
			"_schema": "MonocoComponentSchema",
			"_core": true,
			"on": {
				"params": [
					{
						"name": "state",
						"type": "string"
					},
					{
						"name": "handler",
						"type": "function"
					},
					{
						"name": "useCoreAPI",
						"type": "boolean",
						"mandatory": false
					}
				]
			},
			"off": {
				"params": [
					{
						"name": "state",
						"type": "string"
					},
					{
						"name": "behaviorId",
						"type": "string",
						"mandatory": false
					}
				]
			},
			"require": {
				"params": [
					{
						"name": "id",
						"type": "string"
					}
				]
			},
			"destroy": {
				"params": []
			},
			"classInfo": {
				"type": "@MonocoClassInfo",
				"readOnly": false,
				"mandatory": false,
				"default": {}
			},
			"init": {
				"params": [
					{
						"name": "conf",
						"type": "object"
					}
				]
			},
			"error": {
				"params": [
					{
						"name": "data",
						"type": "errorParam"
					}
				]
			}
		},
		"MonocoComponentSchema": {
			"_id": "MonocoComponentSchema",
			"_name": "MonocoComponentSchema",
			"_core": true,
			"on": "method",
			"classInfo": "property",
			"off": "method",
			"require": "method",
			"destroy": "method",
			"init": "method",
			"error": "event"
		},
		"MonocoDatabase": {
			"_id": "MonocoDatabase",
			"_name": "MonocoDatabase",
			"_schema": "MonocoDatabaseSchema",
			"_inherit": [
				"MonocoComponent"
			],
			"_core": true,
			"system": {
				"params": [
					{
						"name": "system",
						"type": "object",
						"mandatory": false
					}
				],
				"result": "string"
			},
			"subsystem": {
				"params": [
					{
						"name": "params",
						"type": "object"
					}
				],
				"result": "string"
			},
			"insert": {
				"params": [
					{
						"name": "classId",
						"type": "string"
					},
					{
						"name": "object",
						"type": "object"
					}
				]
			},
			"update": {
				"params": [
					{
						"name": "schema",
						"type": "string"
					},
					{
						"name": "componentId",
						"type": "string"
					},
					{
						"name": "attributeName",
						"type": "string"
					},
					{
						"name": "attributeValue",
						"type": "object"
					}
				]
			},
			"remove": {
				"params": [
					{
						"name": "classId",
						"type": "string"
					},
					{
						"name": "object",
						"type": "string"
					}
				]
			}
		},
		"MonocoDatabaseSchema": {
			"_id": "MonocoDatabaseSchema",
			"_name": "MonocoDatabaseSchema",
			"_inherit": [
				"MonocoComponentSchema"
			],
			"_core": true,
			"system": "method",
			"subsystem": "method",
			"insert": "event",
			"update": "event",
			"remove": "event"
		},
		"MonocoMessage": {
			"_id": "MonocoMessage",
			"_name": "MonocoMessage",
			"_schema": "MonocoMessageSchema",
			"_core": true,
			"event": {
				"type": "string",
				"readOnly": false,
				"mandatory": true,
				"default": ""
			},
			"from": {
				"type": "string",
				"readOnly": false,
				"mandatory": true,
				"default": ""
			},
			"data": {
				"type": "object",
				"readOnly": false,
				"mandatory": true,
				"default": {}
			}
		},
		"MonocoMessageSchema": {
			"_id": "MonocoMessageSchema",
			"_name": "MonocoMessageSchema",
			"_core": true,
			"event": "property",
			"from": "property",
			"data": "property"
		},
		"MonocoMetamodel": {
			"_id": "MonocoMetamodel",
			"_name": "MonocoMetamodel",
			"_schema": "MonocoMetamodelSchema",
			"_inherit": [
				"MonocoComponent"
			],
			"_core": true,
			"schema": {
				"params": [
					{
						"name": "schema",
						"type": "object"
					}
				]
			},
			"type": {
				"params": [
					{
						"name": "type",
						"type": "object"
					}
				]
			},
			"create": {
				"params": []
			}
		},
		"MonocoMetamodelSchema": {
			"_id": "MonocoMetamodelSchema",
			"_name": "MonocoMetamodelSchema",
			"_inherit": [
				"MonocoComponentSchema"
			],
			"_core": true,
			"schema": "method",
			"type": "method",
			"create": "method"
		},
		"MonocoState": {
			"_id": "MonocoState",
			"_name": "MonocoState",
			"_schema": "MonocoStateSchema",
			"_class": false,
			"_core": true,
			"name": {
				"type": "string",
				"readOnly": false,
				"mandatory": true,
				"default": ""
			}
		},
		"MonocoStateSchema": {
			"_id": "MonocoStateSchema",
			"_name": "MonocoStateSchema",
			"_core": true,
			"name": "property"
		},
		"MonocoSystem": {
			"_id": "MonocoSystem",
			"_name": "MonocoSystem",
			"_schema": "MonocoSystemSchema",
			"_inherit": [
				"MonocoComponent"
			],
			"_core": true,
			"name": {
				"type": "string",
				"readOnly": false,
				"mandatory": true,
				"default": ""
			},
			"master": {
				"type": "boolean",
				"readOnly": false,
				"mandatory": false,
				"default": false
			},
			"subsystem": {
				"type": "boolean",
				"readOnly": false,
				"mandatory": false,
				"default": false
			},
			"version": {
				"type": "string",
				"readOnly": false,
				"mandatory": false,
				"default": "0.0.1"
			},
			"description": {
				"type": "string",
				"readOnly": false,
				"mandatory": false,
				"default": ""
			},
			"schemas": {
				"type": "object",
				"readOnly": false,
				"mandatory": false,
				"default": {}
			},
			"behaviors": {
				"type": "object",
				"readOnly": false,
				"mandatory": false,
				"default": {}
			},
			"types": {
				"type": "object",
				"readOnly": false,
				"mandatory": false,
				"default": {}
			},
			"components": {
				"type": "object",
				"readOnly": false,
				"mandatory": false,
				"default": {}
			},
			"ready": {},
			"sync": {},
			"main": {}
		},
		"MonocoSystemSchema": {
			"_id": "MonocoSystemSchema",
			"_name": "MonocoSystemSchema",
			"_inherit": [
				"MonocoComponentSchema"
			],
			"_core": true,
			"name": "property",
			"master": "property",
			"subsystem": "property",
			"version": "property",
			"description": "property",
			"schemas": "property",
			"behaviors": "property",
			"types": "property",
			"components": "property",
			"ready": "event",
			"sync": "method",
			"main": "event"
		}
	},
	"types": {
		"html": {
			"name": "html",
			"type": "string",
			"core": true
		},
		"css": {
			"name": "css",
			"type": "string",
			"core": true
		},
		"collection": {
			"name": "collection",
			"type": "object",
			"schema": {
				"type": {
					"type": [
						"string"
					],
					"mandatory": true
				},
				"readOnly": {
					"type": "boolean",
					"mandatory": true
				},
				"mandatory": {
					"type": "boolean",
					"mandatory": true
				},
				"default": {
					"type": "object",
					"mandatory": true
				}
			},
			"core": true
		},
		"errorParam": {
			"name": "errorParam",
			"type": "object",
			"schema": {
				"message": {
					"type": "string",
					"mandatory": true
				},
				"error": {
					"type": "object",
					"mandatory": true
				}
			},
			"core": true
		},
		"event": {
			"name": "event",
			"type": "object",
			"schema": {
				"params": {
					"type": [
						"parameter"
					],
					"mandatory": false
				}
			},
			"core": true
		},
		"javascript": {
			"name": "javascript",
			"type": "string",
			"core": true
		},
		"message": {
			"name": "message",
			"type": "object",
			"schema": {
				"event": {
					"type": "string",
					"mandatory": true
				},
				"from": {
					"type": "string",
					"mandatory": false
				},
				"data": {
					"type": "object",
					"mandatory": true
				}
			},
			"core": true
		},
		"method": {
			"name": "method",
			"type": "object",
			"schema": {
				"result": {
					"type": "string",
					"mandatory": false
				},
				"params": {
					"type": [
						"parameter"
					],
					"mandatory": false
				}
			},
			"core": true
		},
		"parameter": {
			"name": "parameter",
			"type": "object",
			"schema": {
				"name": {
					"type": "string",
					"mandatory": true
				},
				"type": {
					"type": "string",
					"mandatory": true
				},
				"mandatory": {
					"type": "boolean",
					"mandatory": false
				},
				"default": {
					"type": "@type",
					"mandatory": false
				}
			},
			"core": true
		},
		"property": {
			"name": "property",
			"type": "object",
			"schema": {
				"type": {
					"type": "string",
					"mandatory": true
				},
				"readOnly": {
					"type": "boolean",
					"mandatory": true
				},
				"mandatory": {
					"type": "boolean",
					"mandatory": true
				},
				"default": {
					"type": "@type",
					"mandatory": true
				}
			},
			"core": true
		}
	},
	"behaviors": {
		"1aaee1e6311ff39": {
			"_id": "1aaee1e6311ff39",
			"component": "monoco",
			"state": "load",
			"action": "function load(url, async) {    var xhr = null, callbackLoad = null;    xhr = new XMLHttpRequest();    callbackLoad = function callbackLoad(system) {        var sysId = $db.system(system);        var sys = $component.get(sysId);        var systems = document.querySelectorAll('link[rel=system]');        if (sys) {            sys.main();        }        if (systems.length + 1 === $db.MonocoSystem.count() ) {            $component.get('monoco').systemLoaded();            }    };    if (async) {        xhr.open('GET', url, true);        xhr.onreadystatechange = function () {            if (xhr.readyState === 4) {                if (xhr.status === 200) {                    callbackLoad(JSON.parse(xhr.response));                }            }        };        xhr.send(null);    } else {        xhr.open('GET', url, false);        xhr.send(null);        if (xhr.status === 200) {            callbackLoad(JSON.parse(xhr.response));        }    }}",
			"core": true,
			"useCoreAPI": true
		},
		"1f6001773a18791": {
			"_id": "1f6001773a18791",
			"component": "monoco",
			"state": "ready",
			"action": "function ready() {    var systems = [],        system = null,        i = 0,        length = 0;    if (typeof document !== 'undefined') {        systems = document.querySelectorAll('link[rel=system]');        length = systems.length;        for (i = 0; i < length; i++) {            system = systems[i];            if (system.getAttribute('async') === 'true') {                this.load(system.href, true);            } else {                this.load(system.href, false);            }        }    }}",
			"core": true
		},
		"16dcb1fce31e59f": {
			"_id": "16dcb1fce31e59f",
			"component": "Monoco",
			"state": "error",
			"action": "function error(data) { console.error('monoco: ' + data.message, data.error); }",
			"core": true
		},
		"160c11702716ac1": {
			"_id": "160c11702716ac1",
			"component": "Monoco",
			"state": "find",
			"action": "function find(Class, query) { return $component.find(Class, query);}",
			"core": true,
			"useCoreAPI": true
		},
		"119661076a13c3f": {
			"_id": "119661076a13c3f",
			"component": "Monoco",
			"state": "system",
			"action": "function system(name) { var System = null, system = {}, result = [], conf = {}; if (name) { conf.master = true; conf.name = name; System = this.require('MonocoSystem'); system = new System(conf); } else { result = this.find('MonocoSystem', {'master': true}); if (result.length) { system = result[0]; } } return system; }",
			"core": true
		},
		"14ef0189bc16a3e": {
			"_id": "14ef0189bc16a3e",
			"component": "Monoco",
			"state": "warning",
			"action": "function warning(message) { console.warn('monoco: ' + message); }",
			"core": true
		},
		"199e51f0641fccc": {
			"_id": "199e51f0641fccc",
			"component": "MonocoChannel",
			"state": "listen",
			"action": "function listen(event, action) { $channel.listen(event, action); }",
			"core": true,
			"useCoreAPI": true
		},
		"1a0521c38e1a781": {
			"_id": "1a0521c38e1a781",
			"component": "MonocoChannel",
			"state": "send",
			"action": "function send(message) { return $channel.send(message); }",
			"core": true,
			"useCoreAPI": true
		},
		"1756713bbb19f97": {
			"_id": "1756713bbb19f97",
			"component": "MonocoClassInfo",
			"state": "collection",
			"action": "function collection(name) { var result = {}; if (this.metamodel()[name] === 'collection') { result = this.model()[name]; } return result; }",
			"core": true
		},
		"169de1db9d1df01": {
			"_id": "169de1db9d1df01",
			"component": "MonocoClassInfo",
			"state": "collections",
			"action": "function collections() { var keys = Object.keys(this.metamodel()), item = '', result = [], i = 0, length = 0; length = keys.length; for (i = 0; i < length; i++) { item = keys[i]; if (this.metamodel()[item] === 'collection') { result.push(item); } } return result; }",
			"core": true
		},
		"1039c1e04a1830b": {
			"_id": "1039c1e04a1830b",
			"component": "MonocoClassInfo",
			"state": "event",
			"action": "function event(name) { var result = {}; if (this.metamodel()[name] === 'event') { result = this.model()[name]; } return result; }",
			"core": true
		},
		"1f2b4106bd13c49": {
			"_id": "1f2b4106bd13c49",
			"component": "MonocoClassInfo",
			"state": "events",
			"action": "function events() { var keys = Object.keys(this.metamodel()), item = '', result = [], i = 0, length = 0; length = keys.length; for (i = 0; i < length; i++) { item = keys[i]; if (this.metamodel()[item] === 'event') { result.push(item); } } return result; }",
			"core": true
		},
		"1188a1a3191c250": {
			"_id": "1188a1a3191c250",
			"component": "MonocoClassInfo",
			"state": "method",
			"action": "function method(name) { var result = {}; if (this.metamodel()[name] === 'method') { result = this.model()[name]; } return result; }",
			"core": true
		},
		"1fdc911e5619f59": {
			"_id": "1fdc911e5619f59",
			"component": "MonocoClassInfo",
			"state": "methods",
			"action": "function methods() { var keys = Object.keys(this.metamodel()), item = '', result = [], i = 0, length = 0; length = keys.length; for (i = 0; i < length; i++) { item = keys[i]; if (this.metamodel()[item] === 'method') { result.push(item); } } return result; }",
			"core": true
		},
		"1182e117dc1151a": {
			"_id": "1182e117dc1151a",
			"component": "MonocoClassInfo",
			"state": "properties",
			"action": "function properties() { var keys = Object.keys(this.metamodel()), item = '', result = [], i = 0, length = 0; length = keys.length; for (i = 0; i < length; i++) { item = keys[i]; if (this.metamodel()[item] === 'property') { result.push(item); } } return result; }",
			"core": true
		},
		"13b81158c31c77a": {
			"_id": "13b81158c31c77a",
			"component": "MonocoClassInfo",
			"state": "property",
			"action": "function property(name) { var result = {}; if (this.metamodel()[name] === 'property') { result = this.model()[name]; } return result; }",
			"core": true
		},
		"183f9147f71ea63": {
			"_id": "183f9147f71ea63",
			"component": "MonocoComponent",
			"state": "destroy",
			"action": "function destroy() { $component.destroy(this.id()); }",
			"core": true,
			"useCoreAPI": true
		},
		"158931960d18e9f": {
			"_id": "158931960d18e9f",
			"component": "MonocoComponent",
			"state": "off",
			"action": "function off(state, behaviorId) { var args = [], i = 0, length = 0; length = arguments.length; for (i = 0; i < length - 7; i++) { args.push(arguments[i]); } if ($workflow.checkParams({\"component\": this, \"methodName\": \"off\", \"args\": args})) { if ($metamodel.isValidState(state, this.constructor.name)) {$behavior.remove({\"behaviorId\": behaviorId, \"componentId\": this.id(), \"state\": state}); } else { $helper.getMonoco().warning({ \"message\":\"invoke 'off' method of component '\" + this.id() + \"' with an invalid state '\" + state + \"'\"}); } } }",
			"core": true,
			"useCoreAPI": true
		},
		"14d1512fb917997": {
			"_id": "14d1512fb917997",
			"component": "MonocoComponent",
			"state": "require",
			"action": "function require(id) { return $component.get(id); }",
			"core": true,
			"useCoreAPI": true
		},
		"100851374c107f1": {
			"_id": "100851374c107f1",
			"component": "MonocoDatabase",
			"state": "subsystem",
			"action": "function subsystem(params) { return $db.subsystem(params); }",
			"core": true,
			"useCoreAPI": true
		},
		"1e8bc1557213f16": {
			"_id": "1e8bc1557213f16",
			"component": "MonocoDatabase",
			"state": "system",
			"action": "function system(system) { return $db.system(system); }",
			"core": true,
			"useCoreAPI": true
		},
		"119291f92014c23": {
			"_id": "119291f92014c23",
			"component": "MonocoMetamodel",
			"state": "create",
			"action": "function create() { $metamodel.create(); }",
			"core": true,
			"useCoreAPI": true
		},
		"1d3b919d531dc7b": {
			"_id": "1d3b919d531dc7b",
			"component": "MonocoMetamodel",
			"state": "schema",
			"action": "function schema(schema) { $metamodel.schema(schema); }",
			"core": true,
			"useCoreAPI": true
		},
		"1d3781a5f11f247": {
			"_id": "1d3781a5f11f247",
			"component": "MonocoMetamodel",
			"state": "type",
			"action": "function type(type) { $metamodel.type(type); }",
			"core": true,
			"useCoreAPI": true
		},
		"1ac2b16cd8155d9": {
			"_id": "1ac2b16cd8155d9",
			"component": "MonocoSystem",
			"state": "sync",
			"action": "function sync() { var dump = $db.dump(); this.schemas(dump.schemas); this.types(dump.types); this.behaviors(dump.behaviors); this.components(dump.components); }",
			"core": true,
			"useCoreAPI": true
		},
		"1d492121411dbe6": {
			"_id": "1d492121411dbe6",
			"component": "e89c617b6b15d24",
			"state": "main",
			"action": "function main() { var monoco = $component.get('monoco'); monoco.ready(); }",
			"core": true,
			"useCoreAPI": true
		}
	},
	"components": {
		"Monoco": {
			"monoco": {
				"_id": "monoco",
				"version": "0.5.5"
			}
		},
		"MonocoChannel": {
			"channel": {
				"_id": "channel"
			}
		},
		"MonocoDatabase": {
			"db": {
				"_id": "db"
			}
		},
		"MonocoMetamodel": {
			"metamodel": {
				"_id": "metamodel"
			}
		}
	}
}