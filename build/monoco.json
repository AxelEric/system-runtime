{
	"name": "monoco",
	"version": "0.1.5",
	"description": "The Model-Driven Components Framework",
	"_id": "e89c617b6b15d24",
	"schemas": {
		"Monoco": {
			"_id": "Monoco",
			"_name": "Monoco",
			"_schema": "MonocoSchema",
			"_inherit": [
				"MonocoComponent"
			],
			"_core": true,
			"version": {
				"type": "string",
				"readOnly": true,
				"mandatory": true,
				"default": "0.0.0"
			},
			"find": {
				"params": [
					{
						"name": "Class",
						"type": "string"
					},
					{
						"name": "query",
						"type": "object",
						"mandatory": false,
						"default": {}
					}
				],
				"result": "array"
			},
			"load": {
				"params": [
					{
						"name": "url",
						"type": "string"
					},
					{
						"name": "async",
						"type": "boolean",
						"mandatory": false,
						"default": true
					}
				]
			},
			"warning": {
				"params": [
					{
						"name": "message",
						"type": "string"
					}
				]
			},
			"system": {
				"params": [
					{
						"name": "name",
						"type": "string",
						"mandatory": false
					}
				],
				"result": "object"
			},
			"ready": {}
		},
		"MonocoBehavior": {
			"_id": "MonocoBehavior",
			"_name": "MonocoBehavior",
			"_schema": "MonocoBehaviorSchema",
			"_core": true,
			"_class": false,
			"core": {
				"type": "boolean",
				"readOnly": false,
				"mandatory": false,
				"default": false
			},
			"useCoreAPI": {
				"type": "boolean",
				"readOnly": false,
				"mandatory": false,
				"default": false
			},
			"component": {
				"type": "string",
				"readOnly": false,
				"mandatory": true,
				"default": ""
			},
			"action": {
				"type": "string",
				"readOnly": false,
				"mandatory": true,
				"default": ""
			},
			"state": {
				"type": "string",
				"readOnly": false,
				"mandatory": true,
				"default": ""
			}
		},
		"MonocoBehaviorSchema": {
			"_id": "MonocoBehaviorSchema",
			"_name": "MonocoBehaviorSchema",
			"_core": true,
			"core": "property",
			"component": "property",
			"action": "property",
			"state": "property",
			"useCoreAPI": "property"
		},
		"MonocoClassInfo": {
			"_id": "MonocoClassInfo",
			"_name": "MonocoClassInfo",
			"_schema": "MonocoClassInfoSchema",
			"_inherit": [
				"MonocoComponent"
			],
			"_core": true,
			"metamodel": {
				"type": "object",
				"readOnly": true,
				"mandatory": true,
				"default": {}
			},
			"model": {
				"type": "object",
				"readOnly": true,
				"mandatory": true,
				"default": {}
			},
			"property": {
				"params": [
					{
						"name": "name",
						"type": "string"
					}
				],
				"result": "object"
			},
			"properties": {
				"result": "array"
			},
			"method": {
				"params": [
					{
						"name": "name",
						"type": "string"
					}
				],
				"result": "object"
			},
			"methods": {
				"result": "array"
			},
			"event": {
				"params": [
					{
						"name": "name",
						"type": "string"
					}
				],
				"result": "object"
			},
			"events": {
				"result": "array"
			}
		},
		"MonocoClassInfoSchema": {
			"_id": "MonocoClassInfoSchema",
			"_name": "MonocoClassInfoSchema",
			"_inherit": [
				"MonocoComponentSchema"
			],
			"_core": true,
			"model": "property",
			"metamodel": "property",
			"method": "method",
			"methods": "method",
			"property": "method",
			"properties": "method",
			"event": "method",
			"events": "method"
		},
		"MonocoComponent": {
			"_id": "MonocoComponent",
			"_name": "MonocoComponent",
			"_schema": "MonocoComponentSchema",
			"_core": true,
			"on": {
				"params": [
					{
						"name": "state",
						"type": "string"
					},
					{
						"name": "handler",
						"type": "function"
					},
					{
						"name": "useCoreAPI",
						"type": "boolean",
						"mandatory": false
					}
				]
			},
			"off": {
				"params": [
					{
						"name": "state",
						"type": "string"
					},
					{
						"name": "behaviorId",
						"type": "string",
						"mandatory": false
					}
				]
			},
			"require": {
				"params": [
					{
						"name": "id",
						"type": "string"
					}
				]
			},
			"destroy": {
				"params": []
			},
			"classInfo": {
				"type": "@MonocoClassInfo",
				"readOnly": false,
				"mandatory": false,
				"default": {}
			},
			"init": {
				"params": [
					{
						"name": "conf",
						"type": "object"
					}
				]
			},
			"error": {
				"params": [
					{
						"name": "data",
						"type": "errorParam"
					}
				]
			}
		},
		"MonocoComponentSchema": {
			"_id": "MonocoComponentSchema",
			"_name": "MonocoComponentSchema",
			"_core": true,
			"on": "method",
			"classInfo": "property",
			"off": "method",
			"require": "method",
			"destroy": "event",
			"init": "event",
			"error": "event"
		},
		"MonocoDatabase": {
			"_id": "MonocoDatabase",
			"_name": "MonocoDatabase",
			"_schema": "MonocoDatabaseSchema",
			"_inherit": [
				"MonocoComponent"
			],
			"_core": true,
			"system": {
				"params": [
					{
						"name": "system",
						"type": "object",
						"mandatory": false
					}
				],
				"result": "string"
			},
			"subsystem": {
				"params": [
					{
						"name": "params",
						"type": "object"
					}
				],
				"result": "string"
			},
			"insert": {
				"params": [
					{
						"name": "classId",
						"type": "string"
					},
					{
						"name": "object",
						"type": "object"
					}
				]
			},
			"update": {
				"params": [
					{
						"name": "schema",
						"type": "string"
					},
					{
						"name": "componentId",
						"type": "string"
					},
					{
						"name": "attributeName",
						"type": "string"
					},
					{
						"name": "attributeValue",
						"type": "object"
					}
				]
			},
			"remove": {
				"params": [
					{
						"name": "classId",
						"type": "string"
					},
					{
						"name": "object",
						"type": "string"
					}
				]
			}
		},
		"MonocoDatabaseSchema": {
			"_id": "MonocoDatabaseSchema",
			"_name": "MonocoDatabaseSchema",
			"_inherit": [
				"MonocoComponentSchema"
			],
			"_core": true,
			"system": "method",
			"subsystem": "method",
			"insert": "event",
			"update": "event",
			"remove": "event"
		},
		"MonocoMetamodel": {
			"_id": "MonocoMetamodel",
			"_name": "MonocoMetamodel",
			"_schema": "MonocoMetamodelSchema",
			"_inherit": [
				"MonocoComponent"
			],
			"_core": true,
			"schema": {
				"params": [
					{
						"name": "schema",
						"type": "object"
					}
				]
			},
			"type": {
				"params": [
					{
						"name": "type",
						"type": "object"
					}
				]
			},
			"create": {
				"params": []
			}
		},
		"MonocoMetamodelSchema": {
			"_id": "MonocoMetamodelSchema",
			"_name": "MonocoMetamodelSchema",
			"_inherit": [
				"MonocoComponentSchema"
			],
			"_core": true,
			"schema": "method",
			"type": "method",
			"create": "method"
		},
		"MonocoSchema": {
			"_id": "MonocoSchema",
			"_name": "MonocoSchema",
			"_inherit": [
				"MonocoComponentSchema"
			],
			"_core": true,
			"version": "property",
			"find": "method",
			"load": "method",
			"system": "method",
			"warning": "event",
			"ready": "event"
		},
		"MonocoState": {
			"_id": "MonocoState",
			"_name": "MonocoState",
			"_schema": "MonocoStateSchema",
			"_class": false,
			"_core": true,
			"name": {
				"type": "string",
				"readOnly": false,
				"mandatory": true,
				"default": ""
			}
		},
		"MonocoStateSchema": {
			"_id": "MonocoStateSchema",
			"_name": "MonocoStateSchema",
			"_core": true,
			"name": "property"
		},
		"MonocoSystem": {
			"_id": "MonocoSystem",
			"_name": "MonocoSystem",
			"_schema": "MonocoSystemSchema",
			"_inherit": [
				"MonocoComponent"
			],
			"_core": true,
			"name": {
				"type": "string",
				"readOnly": false,
				"mandatory": true,
				"default": ""
			},
			"master": {
				"type": "boolean",
				"readOnly": false,
				"mandatory": false,
				"default": false
			},
			"subsystem": {
				"type": "boolean",
				"readOnly": false,
				"mandatory": false,
				"default": false
			},
			"version": {
				"type": "string",
				"readOnly": false,
				"mandatory": false,
				"default": "0.0.1"
			},
			"description": {
				"type": "string",
				"readOnly": false,
				"mandatory": false,
				"default": ""
			},
			"schemas": {
				"type": "object",
				"readOnly": false,
				"mandatory": false,
				"default": {}
			},
			"behaviors": {
				"type": "object",
				"readOnly": false,
				"mandatory": false,
				"default": {}
			},
			"types": {
				"type": "object",
				"readOnly": false,
				"mandatory": false,
				"default": {}
			},
			"components": {
				"type": "object",
				"readOnly": false,
				"mandatory": false,
				"default": {}
			},
			"ready": {},
			"sync": {},
			"main": {}
		},
		"MonocoSystemSchema": {
			"_id": "MonocoSystemSchema",
			"_name": "MonocoSystemSchema",
			"_inherit": [
				"MonocoComponentSchema"
			],
			"_core": true,
			"name": "property",
			"master": "property",
			"subsystem": "property",
			"version": "property",
			"description": "property",
			"schemas": "property",
			"behaviors": "property",
			"types": "property",
			"components": "property",
			"ready": "event",
			"sync": "method",
			"main": "event"
		}
	},
	"types": {
		"collection": {
			"name": "collection",
			"type": "object",
			"schema": {
				"type": {
					"type": [
						"string"
					],
					"mandatory": true
				},
				"readOnly": {
					"type": "boolean",
					"mandatory": true
				},
				"mandatory": {
					"type": "boolean",
					"mandatory": true
				},
				"default": {
					"type": "object",
					"mandatory": true
				}
			},
			"core": true
		},
		"errorParam": {
			"name": "errorParam",
			"type": "object",
			"schema": {
				"message": {
					"type": "string",
					"mandatory": true
				},
				"error": {
					"type": "object",
					"mandatory": true
				}
			},
			"core": true
		},
		"event": {
			"name": "event",
			"type": "object",
			"schema": {
				"params": {
					"type": [
						"parameter"
					],
					"mandatory": false
				}
			},
			"core": true
		},
		"method": {
			"name": "method",
			"type": "object",
			"schema": {
				"result": {
					"type": "string",
					"mandatory": false
				},
				"params": {
					"type": [
						"parameter"
					],
					"mandatory": false
				}
			},
			"core": true
		},
		"parameter": {
			"name": "parameter",
			"type": "object",
			"schema": {
				"name": {
					"type": "string",
					"mandatory": true
				},
				"type": {
					"type": "string",
					"mandatory": true
				},
				"mandatory": {
					"type": "boolean",
					"mandatory": false
				},
				"default": {
					"type": "@type",
					"mandatory": false
				}
			},
			"core": true
		},
		"property": {
			"name": "property",
			"type": "object",
			"schema": {
				"type": {
					"type": "string",
					"mandatory": true
				},
				"readOnly": {
					"type": "boolean",
					"mandatory": true
				},
				"mandatory": {
					"type": "boolean",
					"mandatory": true
				},
				"default": {
					"type": "@type",
					"mandatory": true
				}
			},
			"core": true
		}
	},
	"behaviors": {
		"1aaee1e6311ff39": {
			"_id": "1aaee1e6311ff39",
			"component": "monoco",
			"state": "load",
			"action": "function load(url, async) { var xhr = null, callbackLoad = null; xhr = new XMLHttpRequest(); callbackLoad = function callbackLoad(system) { var sysId = $db.system(system); var sys = $component.get(sysId); if (sys) { sys.main(); } }; if (async) { xhr.open('GET', url, true); xhr.onreadystatechange = function () { if (xhr.readyState === 4) { if (xhr.status === 200) { callbackLoad(JSON.parse(xhr.response)); } } }; xhr.send(null); } else { xhr.open('GET', url, false); xhr.send(null); if (xhr.status === 200) { callbackLoad(JSON.parse(xhr.response)); } } }",
			"core": true,
			"useCoreAPI": true
		},
		"1f6001773a18791": {
			"_id": "1f6001773a18791",
			"component": "monoco",
			"state": "ready",
			"action": "function ready() { var systems = [], system = null, i = 0, length = 0; if (typeof document !== 'undefined') { systems = document.querySelectorAll('link[rel=system]'); length = systems.length; for (i = 0; i < length; i++) { system = systems[i]; this.load(system.href, false); } } }",
			"core": true
		},
		"1b8db1117f17eea": {
			"_id": "1b8db1117f17eea",
			"component": "Monoco",
			"state": "error",
			"action": "function error(data) { console.error('monoco: ' + data.message, data.error); }",
			"core": true
		},
		"10f1715fca103ea": {
			"_id": "10f1715fca103ea",
			"component": "Monoco",
			"state": "find",
			"action": "function find(Class, query) { var documents = [], components = [], component = null, i = 0, length = 0; if ($db[Class]) { documents = $db[Class].find(query); length = documents.length; for (i = 0; i < length; i++) { component = $component.get(documents[i]._id); if (component) { components.push(component); } } } return components; }",
			"core": true,
			"useCoreAPI": true
		},
		"19465176fd1541d": {
			"_id": "19465176fd1541d",
			"component": "Monoco",
			"state": "system",
			"action": "function system(name) { var System = null, system = {}, result = [], conf = {}; if (name) { conf.master = true; conf.name = name; System = monoco.require('MonocoSystem'); system = new System(conf); } else { result = monoco.find('MonocoSystem', {'master': true}); if (result.length) { system = result[0]; } } return system; }",
			"core": true
		},
		"1d1591713112d8e": {
			"_id": "1d1591713112d8e",
			"component": "Monoco",
			"state": "warning",
			"action": "function warning(message) { console.warn('monoco: ' + message); }",
			"core": true
		},
		"1b2871141b176de": {
			"_id": "1b2871141b176de",
			"component": "MonocoClassInfo",
			"state": "event",
			"action": "function event(name) { var result = {}; if (this.metamodel()[name] === 'event') { result = this.model()[name]; } return result; }",
			"core": true
		},
		"185691294019e77": {
			"_id": "185691294019e77",
			"component": "MonocoClassInfo",
			"state": "events",
			"action": "function events() { var keys = Object.keys(this.metamodel()), item = '', result = [], i = 0, length = 0; length = keys.length; for (i = 0; i < length; i++) { item = keys[i]; if (this.metamodel()[item] === 'event') { result.push(item); } } return result; }",
			"core": true
		},
		"1a971172b9186fb": {
			"_id": "1a971172b9186fb",
			"component": "MonocoClassInfo",
			"state": "method",
			"action": "function method(name) { var result = {}; if (this.metamodel()[name] === 'method') { result = this.model()[name]; } return result; }",
			"core": true
		},
		"12c91145c217a2f": {
			"_id": "12c91145c217a2f",
			"component": "MonocoClassInfo",
			"state": "methods",
			"action": "function methods() { var keys = Object.keys(this.metamodel()), item = '', result = [], i = 0, length = 0; length = keys.length; for (i = 0; i < length; i++) { item = keys[i]; if (this.metamodel()[item] === 'method') { result.push(item); } } return result; }",
			"core": true
		},
		"1521e163491021d": {
			"_id": "1521e163491021d",
			"component": "MonocoClassInfo",
			"state": "properties",
			"action": "function properties() { var keys = Object.keys(this.metamodel()), item = '', result = [], i = 0, length = 0; length = keys.length; for (i = 0; i < length; i++) { item = keys[i]; if (this.metamodel()[item] === 'property') { result.push(item); } } return result; }",
			"core": true
		},
		"19a731a3c9131d9": {
			"_id": "19a731a3c9131d9",
			"component": "MonocoClassInfo",
			"state": "property",
			"action": "function property(name) { var result = {}; if (this.metamodel()[name] === 'property') { result = this.model()[name]; } return result; }",
			"core": true
		},
		"1d4d212f7a1386e": {
			"_id": "1d4d212f7a1386e",
			"component": "MonocoComponent",
			"state": "destroy",
			"action": "function destroy() { $component.destroy(this.id()); }",
			"core": true,
			"useCoreAPI": true
		},
		"1df131c1b9104f2": {
			"_id": "1df131c1b9104f2",
			"component": "MonocoComponent",
			"state": "off",
			"action": "function off(state, behaviorId) { var args = [], i = 0, length = 0; length = arguments.length; for (i = 0; i < length - 5; i++) { args.push(arguments[i]); } if ($workflow.checkParams({\"component\": this, \"methodName\": \"off\", \"args\": args})) { if ($metamodel.isValidState(state, this.constructor.name)) {$behavior.remove({\"behaviorId\": behaviorId, \"componentId\": this.id(), \"state\": state}); } else { $helper.getMonoco().warning(\"invoke 'off' method of component '\" + this.id() + \"' with an invalid state '\" + state + \"'\"); } } }",
			"core": true,
			"useCoreAPI": true
		},
		"139e21687d106d6": {
			"_id": "139e21687d106d6",
			"component": "MonocoComponent",
			"state": "require",
			"action": "function require(id) { return $component.get(id); }",
			"core": true,
			"useCoreAPI": true
		},
		"1915110ec61407a": {
			"_id": "1915110ec61407a",
			"component": "MonocoDatabase",
			"state": "subsystem",
			"action": "function subsystem(params) { return $db.subsystem(params); }",
			"core": true,
			"useCoreAPI": true
		},
		"1799617dd310830": {
			"_id": "1799617dd310830",
			"component": "MonocoDatabase",
			"state": "system",
			"action": "function system(system) { return $db.system(system); }",
			"core": true,
			"useCoreAPI": true
		},
		"1dad31580218a8e": {
			"_id": "1dad31580218a8e",
			"component": "MonocoMetamodel",
			"state": "create",
			"action": "function create() { $metamodel.create(); }",
			"core": true,
			"useCoreAPI": true
		},
		"1c7e61959118f05": {
			"_id": "1c7e61959118f05",
			"component": "MonocoMetamodel",
			"state": "schema",
			"action": "function schema(schema) { $metamodel.schema(schema); }",
			"core": true,
			"useCoreAPI": true
		},
		"120141b7c513ed7": {
			"_id": "120141b7c513ed7",
			"component": "MonocoMetamodel",
			"state": "type",
			"action": "function type(type) { $metamodel.type(type); }",
			"core": true,
			"useCoreAPI": true
		},
		"1cd93148c510b46": {
			"_id": "1cd93148c510b46",
			"component": "MonocoSystem",
			"state": "sync",
			"action": "function sync() { var dump = $db.dump(); this.schemas(dump.schemas); this.types(dump.types); this.behaviors(dump.behaviors); this.components(dump.components); }",
			"core": true,
			"useCoreAPI": true
		},
		"18e4a140bf16f37": {
			"_id": "18e4a140bf16f37",
			"component": "e89c617b6b15d24",
			"state": "main",
			"action": "function main() { var monoco = $component.get('monoco'); monoco.ready(); }",
			"core": true,
			"useCoreAPI": true
		}
	},
	"components": {
		"Monoco": {
			"monoco": {
				"_id": "monoco",
				"version": "0.1.5"
			}
		},
		"MonocoDatabase": {
			"db": {
				"_id": "db"
			}
		},
		"MonocoMetamodel": {
			"metamodel": {
				"_id": "metamodel"
			}
		}
	}
}