{"schemas":{"Worker":{"_id":"Worker","_name":"Worker","_schema":"WorkerSchema","_inherit":["SyrupComponent"],"_core":true,"worker":{"type":"object","readOnly":false,"mandatory":false,"default":{}},"send":{"params":[{"name":"message","type":"object"}]}},"WorkerSchema":{"_id":"WorkerSchema","_name":"WorkerSchema","_inherit":["SyrupComponentSchema"],"_core":true,"worker":"property","send":"method"},"SyrupAdminSchema":{"_id":"SyrupAdminSchema","_name":"SyrupAdminSchema","_inherit":["SyrupComponentSchema"],"_core":true,"start":"method","stop":"method"},"SyrupAdmin":{"_id":"SyrupAdmin","_name":"SyrupAdmin","_schema":"SyrupAdminSchema","_inherit":["SyrupComponent"],"_core":true,"start":{"params":[{"name":"path","type":"string","mandatory":false,"default":""}]},"stop":{}},"SyrupChannelSchema":{"_id":"SyrupChannelSchema","_name":"SyrupChannelSchema","sync":"event","loadSystem":"event","createSchema":"event","updateSchema":"event","deleteSchema":"event","createModel":"event","updateModel":"event","deleteModel":"event","createType":"event","updateType":"event","deleteType":"event","createComponent":"event","updateComponent":"event","deleteComponent":"event","createBehavior":"event","updateBehavior":"event","deleteBehavior":"event"},"SyrupChannel":{"_id":"SyrupChannel","_name":"SyrupChannel","_schema":"SyrupChannelSchema","_inherit":["SyrupComponent"],"sync":{},"loadSystem":{"params":[{"name":"system","type":"object"}]},"createSchema":{"params":[{"name":"id","type":"string"},{"name":"schema","type":"object"}]},"updateSchema":{"params":[{"name":"id","type":"string"},{"name":"schema","type":"object"}]},"deleteSchema":{"params":[{"name":"id","type":"string"}]},"createModel":{"params":[{"name":"id","type":"string"},{"name":"model","type":"object"}]},"updateModel":{"params":[{"name":"id","type":"string"},{"name":"model","type":"object"}]},"deleteModel":{"params":[{"name":"id","type":"string"}]},"createType":{"params":[{"name":"id","type":"string"},{"name":"type","type":"object"}]},"updateType":{"params":[{"name":"id","type":"string"},{"name":"type","type":"object"}]},"deleteType":{"params":[{"name":"id","type":"string"}]},"createComponent":{"params":[{"name":"collection","type":"string"},{"name":"component","type":"object"}]},"updateComponent":{"params":[{"name":"id","type":"string"},{"name":"collection","type":"string"},{"name":"component","type":"object"}]},"deleteComponent":{"params":[{"name":"id","type":"string"},{"name":"collection","type":"string"}]},"createBehavior":{"params":[{"name":"behavior","type":"object"}]},"updateBehavior":{"params":[{"name":"id","type":"string"},{"name":"behavior","type":"object"}]},"deleteBehavior":{"params":[{"name":"id","type":"string"}]}}},"types":{},"behaviors":{"1c00c107e01c9b3":{"_id":"1c00c107e01c9b3","component":"SyrupAdmin","state":"start","action":"function start(path) {\n    var Worker = null,\n    worker = null,\n    workerPath = '',\n    SyrupChannel = null,\n    syrupChannel = null;\n    \n    if (path) {\n        workerPath = path + '/scripts/worker.js';\n        workerPath = workerPath.replace(/\\/\\//g,'/');\n    } else {\n        workerPath = '/designer/scripts/worker.js';\n    }\n    \n    if (typeof SharedWorker !== 'undefined') {\n        \n        if (!this.require('channel-admin')) {\n            SyrupChannel = this.require('SyrupChannel');\n            syrupChannel = new SyrupChannel({\n                '_id': 'channel-admin',\n                '_core': true\n            });\n            \n            syrupChannel.on('send', function send(message) {\n                this.require('worker-admin').worker().port.postMessage(message);\n            });\n            \n            // schema change events\n            syrupChannel.on('createSchema', function createSchema(id, schema) {\n                this.require('metamodel').schema(schema);\n                this.require('metamodel').create();\n            }, true);\n            \n            syrupChannel.on('updateSchema', function updateSchema(id, schema) {\n                 this.require('metamodel').type(schema);\n                 this.require('metamodel').create();\n            }, true);\n            \n            syrupChannel.on('deleteSchema', function deleteSchema(id) {\n                $db['SyrupSchema'].remove({'_id': id});\n                this.require('metamodel').create();\n            }, true);\n            \n            // model change events\n            syrupChannel.on('createModel', function createModel(id, model) {\n                this.require('metamodel').schema(model);\n                this.require('metamodel').create();\n            }, true);\n            \n            syrupChannel.on('updateModel', function updateModel(id, model) {\n                 this.require('metamodel').type(model);\n                 this.require('metamodel').create();\n            }, true);\n            \n            syrupChannel.on('deleteModel', function deleteModel(id) {\n                $db['SyrupSchema'].remove({'_id': id});\n                this.require('metamodel').create();\n                $component.removeFromMemory(id);\n            }, true);\n            \n            // type change events\n            syrupChannel.on('createType', function createType(id, type) {\n                this.require('metamodel').type(type);\n                this.require('metamodel').create();\n            }, true);\n            \n            syrupChannel.on('updateType', function updateType(id, type) {\n                 this.require('metamodel').type(type);\n                 this.require('metamodel').create();\n            }, true);\n            \n            syrupChannel.on('deleteType', function deleteType(id) {\n                $db['SyrupType'].remove({'_id': id});\n                this.require('metamodel').create();\n            }, true);\n            \n            // component change events\n            syrupChannel.on('createComponent', function createComponent(model, component) {\n                $db[model].insert(component);\n            }, true);\n            \n            syrupChannel.on('updateComponent', function updateComponent(id, collection, component) {\n                $db[collection].update({'_id': id}, component);\n            }, true);\n            \n            syrupChannel.on('deleteComponent', function deleteComponent(id, collection) {\n                $db[collection].remove({'_id': id});\n            }, true);\n            \n            // behavior change events\n            syrupChannel.on('createBehavior', function createBehavior(component) {\n                $db['SyrupBehavior'].insert(component);\n            }, true);\n            syrupChannel.on('updateBehavior', function updateBehavior(id, behavior) {\n                this.require(id).action(behavior.action);\n            });\n            syrupChannel.on('deleteBehavior', function deleteBehavior(id) {\n                $db['SyrupBehavior'].remove({'_id': id});                  \n            }, true);\n         \n            // System Designer event\n            syrupChannel.on('sync', function sync() {\n                this.loadSystem(JSON.parse(this.require('db').system()));\n            });\n    \n            Worker = this.require('Worker');\n            worker = new Worker({\n                '_id': 'worker-admin',\n                '_core': true,\n                'worker': new SharedWorker(workerPath),\n            });\n            \n            worker.worker().port.onmessage = function (e) {\n              $db.SyrupMessage.insert(e.data);\n            };\n            \n            console.info('syrup: admin is started');\n        } else {\n            console.info('syrup: admin is already started');\n        }\n    } else {\n        console.info('syrup: the browser can not run admin features');\n    }\n}","useCoreAPI":true,"core":true},"1d7151dd2d1558f":{"_id":"1d7151dd2d1558f","component":"SyrupAdmin","state":"stop","action":"function stop() {\n    var worker = null,\n    channel = null;\n    \n    worker = this.require('worker-admin');\n    if (worker && worker.worker()) {\n        worker.worker().port.onmessage = function () {};\n        worker.destroy();\n        \n        channel = this.require('channel-admin');\n        if (channel) {\n            channel.destroy();\n        }\n        \n        console.info('syrup: admin is stopped');\n    }\n}","useCoreAPI":false,"core":false},"1fc101c23918773":{"component":"SyrupComponent","state":"off","action":"function off(state, behaviorId) {\n    var args = [],\n    i = 0,\n    length = 0;\n    length = arguments.length;\n    \n    for (i = 0; i < length - 6; i++) {\n        args.push(arguments[i]);\n    }\n    \n    if ($workflow.checkParams({\n        \"component\": this, \n        \"methodName\": \"off\", \n        \"args\": args\n        })) {\n        \n        if (state || behaviorId) {\n            if ($metamodel.isValidState(state, this.constructor.name)) {\n                $behavior.remove({\n                    \"behaviorId\": behaviorId, \n                    \"componentId\": this.id(), \n                    \"state\": state\n                });\n            } else { \n                console.warn(\"syrup: invoke \\'off\\' method of component '\" + this.id() + \"' with an invalid state '\" + state + \"'\"); \n            }\n        } else {\n            $behavior.remove({\n                \"componentId\": this.id()\n            });\n        }\n    }\n}","core":true,"useCoreAPI":true}},"components":{"SyrupAdmin":{"admin":{"_id":"admin"}}},"name":"system-admin","version":"0.1.0","description":"SyrupJS administration component","_id":"18ed81de331252c","master":false,"subsystem":false}